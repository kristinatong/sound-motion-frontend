{"ast":null,"code":"import _objectSpread from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/SpriteBar.js\";\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux'; // import Konva from 'konva';\n// import { Stage, Layer, Image, Text } from 'react-konva';\n// import { addSprite } from '../actions/sprite'\n\nimport * as actions from '../actions/sprite';\nimport UUID from 'uuid';\n\nvar SpriteBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SpriteBar, _Component);\n\n  function SpriteBar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SpriteBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SpriteBar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedSpriteBar: null\n    };\n\n    _this.selectSprite = function (sprite) {\n      _this.setState({\n        selectedSpriteBar: sprite\n      });\n    };\n\n    _this.imgStyle = function (sprite) {\n      debugger; // this.state.selectedSpriteBar == sprite ? {width:'100px', height:'100px', border:\"5px solid red\"} : {width:'100px', height:'100px'}\n    };\n\n    _this.sprites = function () {\n      // const imgStyle={width:'100px', height:'100px', border:{}}\n      return _this.props.sprites.map(function (sprite) {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          key: sprite.id,\n          style: _this.state.selectedSpriteBar == sprite ? {\n            width: '100px',\n            height: '100px',\n            border: \"5px solid red\"\n          } : {\n            width: '100px',\n            height: '100px'\n          },\n          src: sprite.url,\n          onClick: function onClick() {\n            return _this.selectSprite(sprite);\n          },\n          alt: sprite.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }));\n      });\n    };\n\n    _this.addSpriteMethod = function () {\n      var uniqueKey = UUID();\n\n      if (_this.props.selectedSprite) {\n        _this.props.addSprite(_objectSpread({}, _this.state.selectedSprite, {\n          uniqueKey: uniqueKey\n        }));\n\n        _this.setState({\n          selectedSpriteBar: null\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(SpriteBar, [{\n    key: \"render\",\n    value: function render() {\n      var divStyle = {\n        position: 'absolute',\n        width: '150px',\n        height: '100vh',\n        left: '0',\n        top: '10',\n        backgroundColor: '#EEEEEE',\n        borderRight: '1px dotted'\n      };\n      var spriteBarStyle = {\n        position: 'absolute',\n        // width: '150px',\n        // height: '100vh',\n        left: '0',\n        top: '10',\n        backgroundColor: '#EEEEEE',\n        borderRight: '1px dotted' // return(\n        //   <div style={divStyle} onDragOver={(e)=>this.onDragOver(e)}\n        //     onDrop={(e)=>{this.onDrop(e, \"wip\")}}>\n        //     <h1>Sprite Bar</h1>\n        //     {this.sprites()}\n        //     <button onClick={this.props.addSprite}>Add Sprite</button>\n        //   </div>\n        // )\n\n      };\n      return React.createElement(\"div\", {\n        style: divStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Sprite Bar\"), this.sprites(), React.createElement(\"button\", {\n        onClick: this.addSpriteMethod,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Add Sprite\")) // <Stage style={spriteBarStyle} width={150} height={720}>\n      //   <Layer>\n      //     <Text text='Control Bar'/>\n      //     {this.sprites()}\n      //     <Rect\n      //       x={20}\n      //       y={50}\n      //       width={100}\n      //       height={100}\n      //       fill=\"red\"\n      //       shadowBlur={10}\n      //     />\n      //   </Layer>\n      // </Stage>\n      ;\n    }\n  }]);\n\n  return SpriteBar;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    sprites: state.sprite.sprites,\n    selectedSprite: state.sprite.selectedSprite\n  };\n} // function mapDispatchToProps(dispatch){\n//   return {\n//     addSprite: (selectedSprite) => {\n//       dispatch(addSprite(selectedSprite))\n//     }\n//   }\n// }\n\n\nexport default connect(mapStateToProps, actions)(SpriteBar);","map":{"version":3,"sources":["/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/SpriteBar.js"],"names":["React","Component","Fragment","connect","actions","UUID","SpriteBar","state","selectedSpriteBar","selectSprite","sprite","setState","imgStyle","sprites","props","map","id","width","height","border","url","name","addSpriteMethod","uniqueKey","selectedSprite","addSprite","divStyle","position","left","top","backgroundColor","borderRight","spriteBarStyle","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { connect } from 'react-redux';\n// import Konva from 'konva';\n// import { Stage, Layer, Image, Text } from 'react-konva';\n// import { addSprite } from '../actions/sprite'\nimport * as actions from '../actions/sprite'\nimport UUID from 'uuid'\n\nclass SpriteBar extends Component{\n  state = {\n    selectedSpriteBar: null\n  }\n\n  selectSprite = (sprite) => {\n    this.setState({\n      selectedSpriteBar: sprite\n    })\n  }\n  // border={this.state.selectedSpriteBar == sprite ? \"5px solid red\" : \"\"}\n\n  imgStyle = (sprite) => {\n    debugger\n    // this.state.selectedSpriteBar == sprite ? {width:'100px', height:'100px', border:\"5px solid red\"} : {width:'100px', height:'100px'}\n  }\n\n  sprites = () => {\n    // const imgStyle={width:'100px', height:'100px', border:{}}\n    return this.props.sprites.map(sprite => {\n      return (\n        <Fragment>\n          <img key={sprite.id} style={this.state.selectedSpriteBar == sprite ? {width:'100px', height:'100px', border:\"5px solid red\"} : {width:'100px', height:'100px'}} src={sprite.url} onClick={() => this.selectSprite(sprite)} alt={sprite.name} /><br/>\n        </Fragment>\n      )\n      })\n    }\n\n    // sprites = () => {\n    //   let y = -50\n    //   const imgStyle={width:'100px', height:'100px'}\n    //   return this.props.sprites.map(sprite => {\n    //     const image = new window.Image();\n    //     image.src = sprite.url\n    //     y += 110\n    //     return <Image key={sprite.id}\n    //             image={image}\n    //             onClick={() => this.selectSprite(sprite)}\n    //             x={30}\n    //             y={y}\n    //             width={100}\n    //             height={100}\n    //             stroke='red'\n    //             strokeWidth={5}\n    //             strokeEnabled={this.state.selectedSpriteBar == sprite ? true : false}/>\n    //     })\n    //   }\n\n\n  addSpriteMethod = () => {\n    const uniqueKey = UUID()\n    if(this.props.selectedSprite){\n      this.props.addSprite({...this.state.selectedSprite,uniqueKey:uniqueKey})\n      this.setState({selectedSpriteBar: null})\n    }\n  }\n\n  render(){\n    const divStyle = {\n      position: 'absolute',\n      width: '150px',\n      height: '100vh',\n      left: '0',\n      top: '10',\n      backgroundColor: '#EEEEEE',\n      borderRight: '1px dotted'}\n\n    const spriteBarStyle = {\n      position: 'absolute',\n      // width: '150px',\n      // height: '100vh',\n      left: '0',\n      top: '10',\n      backgroundColor: '#EEEEEE',\n      borderRight: '1px dotted'}\n\n\n    // return(\n    //   <div style={divStyle} onDragOver={(e)=>this.onDragOver(e)}\n    //     onDrop={(e)=>{this.onDrop(e, \"wip\")}}>\n    //     <h1>Sprite Bar</h1>\n    //     {this.sprites()}\n    //     <button onClick={this.props.addSprite}>Add Sprite</button>\n    //   </div>\n    // )\n    return(\n      <div style={divStyle}>\n        <h1>Sprite Bar</h1>\n        {this.sprites()}\n        <button onClick={this.addSpriteMethod}>Add Sprite</button>\n      </div>\n      // <Stage style={spriteBarStyle} width={150} height={720}>\n      //   <Layer>\n      //     <Text text='Control Bar'/>\n      //     {this.sprites()}\n      //     <Rect\n      //       x={20}\n      //       y={50}\n      //       width={100}\n      //       height={100}\n      //       fill=\"red\"\n      //       shadowBlur={10}\n      //     />\n      //   </Layer>\n      // </Stage>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sprites: state.sprite.sprites,\n    selectedSprite: state.sprite.selectedSprite\n  }\n}\n\n// function mapDispatchToProps(dispatch){\n//   return {\n//     addSprite: (selectedSprite) => {\n//       dispatch(addSprite(selectedSprite))\n//     }\n//   }\n// }\n\nexport default connect(mapStateToProps, actions)(SpriteBar);\n"]},"metadata":{},"sourceType":"module"}