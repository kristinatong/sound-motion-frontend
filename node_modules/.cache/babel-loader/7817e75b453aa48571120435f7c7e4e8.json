{"ast":null,"code":"import _defineProperty from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/UploadSound.js\";\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { setSounds } from '../actions/sound';\nvar soundTypes = [{\n  id: 1,\n  name: 'guitar'\n}, {\n  id: 2,\n  name: 'drums'\n}, {\n  id: 3,\n  name: 'piano'\n}];\n\nvar UploadSound =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UploadSound, _Component);\n\n  function UploadSound() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UploadSound);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UploadSound)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      name: \"\",\n      file: null,\n      url: null,\n      soundType: \"\"\n    };\n\n    _this.renderTypes = function () {\n      return soundTypes.map(function (sound) {\n        return React.createElement(Fragment, {\n          key: sound.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"radio\",\n          id: sound.name,\n          name: \"soundType\",\n          value: sound.name,\n          onChange: _this.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17\n          },\n          __self: this\n        }), React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17\n          },\n          __self: this\n        }, sound.name));\n      });\n    };\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault();\n      var data = new FormData();\n      data.append(\"name\", _this.state.name);\n      data.append(\"file\", _this.state.file);\n      data.append(\"sound_type\", _this.state.soundType);\n      fetch(\"http://localhost:3000/api/v1/sounds\", {\n        method: \"POST\",\n        body: data\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        _this.setState({\n          url: data[data.length - 1].url\n        });\n\n        _this.props.setSounds(data);\n      });\n    };\n\n    _this.handleChange = function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.handleFileUpload = function (event) {\n      console.log(event.nativeEvent, event.target.files, event.target.files[0]);\n\n      _this.setState({\n        file: event.target.files[0]\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(UploadSound, [{\n    key: \"render\",\n    value: function render() {\n      console.log(this.state);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Name: \", React.createElement(\"input\", {\n        name: \"name\",\n        type: \"text\",\n        value: this.state.name,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), \"Type: \", this.renderTypes(), React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.handleFileUpload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })), !!this.state.imageURL ? React.createElement(\"img\", {\n        src: this.state.imageURL,\n        alt: \"img\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }) : null);\n    }\n  }]);\n\n  return UploadSound;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    sounds: state.sound.sounds\n  };\n} //\n// function mapDispatchToProps(dispatch){\n//   return {\n//\n//   }\n// }\n//\n\n\nexport default connect(mapStateToProps, {\n  setSounds: setSounds\n})(UploadSound); // export default UploadSound","map":{"version":3,"sources":["/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/UploadSound.js"],"names":["React","Component","Fragment","connect","setSounds","soundTypes","id","name","UploadSound","state","file","url","soundType","renderTypes","map","sound","handleChange","handleSubmit","event","preventDefault","data","FormData","append","fetch","method","body","then","res","json","setState","length","props","target","value","handleFileUpload","console","log","nativeEvent","files","imageURL","mapStateToProps","sounds"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { connect } from 'react-redux';\nimport { setSounds } from '../actions/sound'\n\nconst soundTypes = [{id:1, name: 'guitar'}, {id:2, name: 'drums'}, {id:3, name: 'piano'}]\n\nclass UploadSound extends Component{\n  state = {\n    name: \"\",\n    file: null,\n    url: null,\n    soundType: \"\"\n  };\n\n  renderTypes = () => {\n    return soundTypes.map(sound => {\n      return (<Fragment key={sound.id}><input type=\"radio\" id={sound.name} name=\"soundType\" value={sound.name} onChange={this.handleChange}/><label>{sound.name}</label></Fragment>)\n    })\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const data = new FormData();\n    data.append(\"name\", this.state.name);\n    data.append(\"file\", this.state.file);\n    data.append(\"sound_type\", this.state.soundType)\n    fetch(\"http://localhost:3000/api/v1/sounds\", {\n      method: \"POST\",\n      body: data,\n    })\n      .then(res => res.json())\n      .then(data => {\n        this.setState({ url: data[data.length-1].url });\n        this.props.setSounds(data)\n      });\n  };\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  handleFileUpload = event => {\n    console.log(event.nativeEvent, event.target.files, event.target.files[0]);\n    this.setState({\n      file: event.target.files[0],\n    });\n  };\n\n  render(){\n    console.log(this.state)\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          Name: <input\n            name=\"name\"\n            type=\"text\"\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n\n          Type: {this.renderTypes()}\n          <input type=\"file\" onChange={this.handleFileUpload} />\n          <input type=\"submit\" value=\"Upload\" />\n        </form>\n\n        {!!this.state.imageURL ? (\n          <img src={this.state.imageURL} alt=\"img\" />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sounds: state.sound.sounds\n  }\n}\n//\n// function mapDispatchToProps(dispatch){\n//   return {\n//\n//   }\n// }\n//\nexport default connect(mapStateToProps, { setSounds })(UploadSound);\n// export default UploadSound\n"]},"metadata":{},"sourceType":"module"}