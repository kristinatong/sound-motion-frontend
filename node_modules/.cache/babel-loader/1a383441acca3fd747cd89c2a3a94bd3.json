{"ast":null,"code":"import _classCallCheck from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/Video.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'; // import * as actions from '../redux/actions';\n// import { changeSprite } from '../actions/sprite'\n// import Konva from 'konva';\n\nimport { Stage, Layer } from 'react-konva';\nimport SpriteList from './SpriteList';\nimport ControlBar from './ControlBar';\nimport UploadSound from './UploadSound';\nimport { DiffCamEngine } from './diff-cam-engine'; // import * from './adapter-1.0.7'\n\nvar Video =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Video, _Component);\n\n  function Video() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Video);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Video)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      x: 0,\n      y: 0,\n      bottom: 0,\n      height: 0,\n      left: 0,\n      right: 0,\n      top: 0,\n      width: 0,\n      captureInterval: null\n    };\n\n    _this.getMotion = function () {\n      var canvas = document.getElementById('motion');\n      var video = document.getElementById('video');\n      var score = document.getElementById('score');\n      var test = document.getElementById('test'); // var canvas = this.refs.motion;\n      // var video = this.refs.video\n      // var score = document.getElementById('score');\n      // var test = this.refs.test\n\n      var captureInterval = setInterval(DiffCamEngine.capture, 100);\n      console.log('captureinterval', captureInterval);\n\n      _this.setState({\n        captureInterval: captureInterval\n      });\n\n      function initSuccess() {\n        DiffCamEngine.start();\n      }\n\n      function initError() {\n        alert('Something went wrong.');\n      }\n\n      function capture(payload) {\n        score.textContent = payload.score;\n      } // DiffCamEngine.init({\n      //   video: video,\n      //   test: test,\n      //   motionCanvas: canvas,\n      //   initSuccessCallback: initSuccess,\n      //   initErrorCallback: initError,\n      //   captureCallback: capture\n      // });\n\n    };\n\n    return _this;\n  }\n\n  _createClass(Video, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var spriteCanvas = document.getElementsByClassName('konvajs-content')[0].getBoundingClientRect();\n      var captureCanvas = document.createElement('canvas');\n      captureCanvas.width = spriteCanvas.width;\n      captureCanvas.height = spriteCanvas.height;\n      var diffCanvas = document.createElement('canvas');\n      diffCanvas.width = spriteCanvas.width;\n      diffCanvas.height = spriteCanvas.height;\n      this.setState({\n        x: spriteCanvas.x,\n        y: spriteCanvas.y,\n        bottom: spriteCanvas.bottom,\n        height: spriteCanvas.height,\n        left: spriteCanvas.left,\n        right: spriteCanvas.right,\n        top: spriteCanvas.top,\n        width: spriteCanvas.width,\n        captureCanvas: captureCanvas,\n        diffCanvas: diffCanvas,\n        video: this.refs.video\n      });\n      var canvas = this.refs.test;\n      var ctx = canvas.getContext('2d');\n\n      var drawSprites = function drawSprites() {\n        return _this2.props.canvasSprites.map(function (sprite) {\n          var image = new window.Image();\n          image.src = sprite.sprite.url;\n\n          image.onload = function () {\n            ctx.drawImage(image, sprite.position.x, sprite.position.y, 60, 60);\n          };\n        });\n      };\n\n      this.getMotion(this);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {// const canvas = this.refs.test\n      // const ctx = canvas.getContext('2d')\n      // ctx.drawImage(this.state.video,0,0)\n      // this.props.canvasSprites.map(sprite =>{\n      //   const image = new window.Image();\n      //     image.src = sprite.sprite.url\n      //     image.onload = () =>{\n      //       ctx.drawImage(image,sprite.position.x,sprite.position.y, 60, 60)\n      //     }\n      //   }\n      // )\n    }\n  }, {\n    key: \"render\",\n    // captureCallback(payload) {\n    //   score.textContent = payload.score;\n    // }\n    value: function render() {\n      console.log('VIDEO STATE', this.state);\n      var videoStyle = {\n        top: 0,\n        left: 0,\n        position: 'absolute',\n        zIndex: 4 // background: 'gray',\n\n      };\n      var motionStyle = {\n        top: this.state.top,\n        left: this.state.left,\n        position: 'absolute',\n        zIndex: -1 // background: 'gray',\n\n      };\n      var testStyle = {\n        top: this.state.top,\n        left: this.state.left,\n        position: 'absolute',\n        zIndex: 4,\n        background: 'red'\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        id: \"video\",\n        style: videoStyle,\n        width: this.state.width,\n        height: this.state.height,\n        autoplay: true,\n        ref: \"video\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }), React.createElement(\"canvas\", {\n        id: \"motion\",\n        style: motionStyle,\n        width: this.state.width,\n        height: this.state.height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), React.createElement(\"canvas\", {\n        id: \"test\",\n        style: testStyle,\n        width: this.state.width,\n        height: this.state.height,\n        ref: \"test\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        id: \"score\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }), React.createElement(\"script\", {\n        src: \"https://webrtc.github.io/adapter/adapter-1.0.7.js\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Video;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    canvasSprites: state.sprite.canvasSprites\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Video);","map":{"version":3,"sources":["/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/Video.js"],"names":["React","Component","connect","Stage","Layer","SpriteList","ControlBar","UploadSound","DiffCamEngine","Video","state","x","y","bottom","height","left","right","top","width","captureInterval","getMotion","canvas","document","getElementById","video","score","test","setInterval","capture","console","log","setState","initSuccess","start","initError","alert","payload","textContent","spriteCanvas","getElementsByClassName","getBoundingClientRect","captureCanvas","createElement","diffCanvas","refs","ctx","getContext","drawSprites","props","canvasSprites","map","sprite","image","window","Image","src","url","onload","drawImage","position","videoStyle","zIndex","motionStyle","testStyle","background","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n// import * as actions from '../redux/actions';\n// import { changeSprite } from '../actions/sprite'\n// import Konva from 'konva';\nimport { Stage, Layer } from 'react-konva';\nimport SpriteList from './SpriteList'\nimport ControlBar from './ControlBar'\nimport UploadSound from './UploadSound'\nimport { DiffCamEngine } from './diff-cam-engine'\n// import * from './adapter-1.0.7'\n\n\nclass Video extends Component {\n  state = {\n    x: 0,\n    y: 0,\n    bottom: 0,\n    height: 0,\n    left: 0,\n    right: 0,\n    top: 0,\n    width: 0,\n    captureInterval: null\n\n  }\n\n  componentDidMount(){\n    let spriteCanvas = document.getElementsByClassName('konvajs-content')[0].getBoundingClientRect()\n    const captureCanvas = document.createElement('canvas');\n    captureCanvas.width = spriteCanvas.width\n    captureCanvas.height = spriteCanvas.height\n\t\tconst diffCanvas = document.createElement('canvas');\n    diffCanvas.width = spriteCanvas.width\n    diffCanvas.height = spriteCanvas.height\n\n    this.setState({\n      x: spriteCanvas.x,\n      y: spriteCanvas.y,\n      bottom: spriteCanvas.bottom,\n      height: spriteCanvas.height,\n      left: spriteCanvas.left,\n      right: spriteCanvas.right,\n      top: spriteCanvas.top,\n      width: spriteCanvas.width,\n      captureCanvas: captureCanvas,\n      diffCanvas: diffCanvas,\n      video: this.refs.video\n    })\n\n    const canvas = this.refs.test\n    const ctx = canvas.getContext('2d')\n\n    const drawSprites = () => {return this.props.canvasSprites.map(sprite =>{\n      const image = new window.Image();\n        image.src = sprite.sprite.url\n        image.onload = () =>{\n          ctx.drawImage(image,sprite.position.x,sprite.position.y, 60, 60)\n        }\n      }\n    )}\n\n    this.getMotion(this)\n  }\n\n  componentDidUpdate(){\n    // const canvas = this.refs.test\n    // const ctx = canvas.getContext('2d')\n    // ctx.drawImage(this.state.video,0,0)\n    // this.props.canvasSprites.map(sprite =>{\n    //   const image = new window.Image();\n    //     image.src = sprite.sprite.url\n    //     image.onload = () =>{\n    //       ctx.drawImage(image,sprite.position.x,sprite.position.y, 60, 60)\n    //     }\n    //   }\n    // )\n\n  }\n\n\n\n  getMotion = () => {\n    var canvas = document.getElementById('motion');\n    var video = document.getElementById('video');\n    var score = document.getElementById('score');\n    var test = document.getElementById('test')\n    // var canvas = this.refs.motion;\n    // var video = this.refs.video\n    // var score = document.getElementById('score');\n    // var test = this.refs.test\n\n    let captureInterval = setInterval(DiffCamEngine.capture, 100);\n    console.log('captureinterval',captureInterval)\n    this.setState({\n      captureInterval: captureInterval\n    })\n\n    function initSuccess() {\n      DiffCamEngine.start();\n    }\n\n    function initError() {\n      alert('Something went wrong.');\n    }\n\n    function capture(payload) {\n      score.textContent = payload.score;\n    }\n\n    // DiffCamEngine.init({\n    //   video: video,\n    //   test: test,\n    //   motionCanvas: canvas,\n    //   initSuccessCallback: initSuccess,\n    //   initErrorCallback: initError,\n    //   captureCallback: capture\n    // });\n  }\n  // captureCallback(payload) {\n  //   score.textContent = payload.score;\n  // }\n\n  render(){\n    console.log('VIDEO STATE', this.state)\n    const videoStyle= {\n      top: 0,\n      left: 0,\n      position: 'absolute',\n      zIndex: 4,\n      // background: 'gray',\n    }\n\n    const motionStyle= {\n      top: this.state.top,\n      left: this.state.left,\n      position: 'absolute',\n      zIndex: -1,\n      // background: 'gray',\n    }\n\n    const testStyle= {\n      top: this.state.top,\n      left: this.state.left,\n      position: 'absolute',\n      zIndex: 4,\n      background: 'red'\n    }\n\n    return(\n      <div>\n        <video id=\"video\" style={videoStyle} width={this.state.width} height={this.state.height} autoplay ref='video'></video>\n        <canvas id='motion' style={motionStyle} width={this.state.width} height={this.state.height}/>\n        <canvas id='test' style={testStyle} width={this.state.width} height={this.state.height} ref='test'/>\n        <span id=\"score\"></span>\n        <script src=\"https://webrtc.github.io/adapter/adapter-1.0.7.js\"></script>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    canvasSprites: state.sprite.canvasSprites\n  }\n}\n\nfunction mapDispatchToProps(dispatch){\n  return {}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Video);\n"]},"metadata":{},"sourceType":"module"}