{"ast":null,"code":"import _classCallCheck from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/Player.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ReactPlayer from 'react-player';\nimport { PlayerIcon } from 'react-player-controls';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport { colors } from '../App';\nimport * as actions from '../actions/sound';\nvar music = document.getElementById('music'); // id for audio element\n\nvar duration = music.duration; // Duration of audio clip, calculated here for embedding purposes\n\nvar pButton = document.getElementById('pButton'); // play button\n\nvar playhead = document.getElementById('playhead'); // playhead\n\nvar timeline = document.getElementById('timeline'); // timeline\n// timeline width adjusted for playhead\n\nvar timelineWidth = timeline.offsetWidth - playhead.offsetWidth; // play button event listenter\n\npButton.addEventListener(\"click\", play); // timeupdate event listener\n\nmusic.addEventListener(\"timeupdate\", timeUpdate, false); // makes timeline clickable\n\ntimeline.addEventListener(\"click\", function (event) {\n  moveplayhead(event);\n  music.currentTime = duration * clickPercent(event);\n}, false); // returns click as decimal (.77) of the total timelineWidth\n\nfunction clickPercent(event) {\n  return (event.clientX - getPosition(timeline)) / timelineWidth;\n} // makes playhead draggable\n\n\nplayhead.addEventListener('mousedown', mouseDown, false);\nwindow.addEventListener('mouseup', mouseUp, false); // Boolean value so that audio position is updated only when the playhead is released\n\nvar onplayhead = false; // mouseDown EventListener\n\nfunction mouseDown() {\n  onplayhead = true;\n  window.addEventListener('mousemove', moveplayhead, true);\n  music.removeEventListener('timeupdate', timeUpdate, false);\n} // mouseUp EventListener\n// getting input from all mouse clicks\n\n\nfunction mouseUp(event) {\n  if (onplayhead == true) {\n    moveplayhead(event);\n    window.removeEventListener('mousemove', moveplayhead, true); // change current time\n\n    music.currentTime = duration * clickPercent(event);\n    music.addEventListener('timeupdate', timeUpdate, false);\n  }\n\n  onplayhead = false;\n} // mousemove EventListener\n// Moves playhead as user drags\n\n\nfunction moveplayhead(event) {\n  var newMargLeft = event.clientX - getPosition(timeline);\n\n  if (newMargLeft >= 0 && newMargLeft <= timelineWidth) {\n    playhead.style.marginLeft = newMargLeft + \"px\";\n  }\n\n  if (newMargLeft < 0) {\n    playhead.style.marginLeft = \"0px\";\n  }\n\n  if (newMargLeft > timelineWidth) {\n    playhead.style.marginLeft = timelineWidth + \"px\";\n  }\n} // timeUpdate\n// Synchronizes playhead position with current point in audio\n\n\nfunction timeUpdate() {\n  var playPercent = timelineWidth * (music.currentTime / duration);\n  playhead.style.marginLeft = playPercent + \"px\";\n\n  if (music.currentTime == duration) {\n    pButton.className = \"\";\n    pButton.className = \"play\";\n  }\n} //Play and Pause\n\n\nfunction play() {\n  // start music\n  if (music.paused) {\n    music.play(); // remove play, add pause\n\n    pButton.className = \"\";\n    pButton.className = \"pause\";\n  } else {\n    // pause music\n    music.pause(); // remove pause, add play\n\n    pButton.className = \"\";\n    pButton.className = \"play\";\n  }\n} // Gets audio file duration\n\n\nmusic.addEventListener(\"canplaythrough\", function () {\n  duration = music.duration;\n}, false); // getPosition\n// Returns elements left position relative to top-left of viewport\n\nfunction getPosition(el) {\n  return el.getBoundingClientRect().left;\n}\n\nvar Player =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Player, _Component);\n\n  function Player() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Player);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Player)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loop: false,\n      paused: false,\n      currentTime: null\n    };\n\n    _this.handleChange = function () {\n      _this.setState({\n        loop: !_this.state.loop\n      });\n\n      _this.props.loopSound();\n    };\n\n    _this.play = function () {\n      _this.setState({\n        paused: !_this.state.paused\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Player, [{\n    key: \"render\",\n    value: function render() {\n      console.log('PLAYER PROPS', this.props);\n      console.log('PLAYER STATE', this.state);\n      var url;\n\n      if (this.props.selectedSprite.sound) {\n        url = this.props.selectedSprite.sound.url; // loop = this.props.selectedSprite.sound.loop\n      } else {\n        url = \"test.mp3\";\n      } // return(\n      //   <div className=\"player\">\n      //     <ReactPlayer className=\"react-player\" width={275} height={60} url={url} playing={this.props.djMode ? false : true} controls={this.props.djMode ? false : true} loop={this.state.loop}/><br/>\n      //     <MuiThemeProvider theme={colors}>\n      //     {!this.props.djMode ?\n      //     (\n      //     <FormControlLabel\n      //     disabled={!this.props.selectedSprite.sound ? true : false}\n      //     control={\n      //       <Checkbox\n      //         checked={this.state.loop}\n      //         value={this.state.loop}\n      //         onChange={this.handleChange}\n      //         color=\"primary\"\n      //       />\n      //     }\n      //     label=\"LOOP\"\n      //   />) : null}\n      //   </MuiThemeProvider>\n      //   </div>\n      // )\n\n\n      return React.createElement(\"div\", {\n        className: \"player\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(\"audio\", {\n        id: \"music\",\n        preload: \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"source\", {\n        src: \"http://www.alexkatz.me/codepen/music/interlude.mp3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), React.createElement(\"source\", {\n        src: \"http://www.alexkatz.me/codepen/music/interlude.ogg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"audioplayer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"pButton\",\n        class: \"play\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"timeline\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"playhead\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }))), React.createElement(MuiThemeProvider, {\n        theme: colors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, !this.props.djMode ? React.createElement(FormControlLabel, {\n        disabled: !this.props.selectedSprite.sound ? true : false,\n        control: React.createElement(Checkbox, {\n          checked: this.state.loop,\n          value: this.state.loop,\n          onChange: this.handleChange,\n          color: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }),\n        label: \"LOOP\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }) : null));\n    }\n  }]);\n\n  return Player;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    selectedSprite: state.sprite.selectedSprite,\n    djMode: state.sound.djMode\n  };\n} // function mapDispatchToProps(dispatch){\n//   return {\n//\n//   }\n// }\n\n\nexport default connect(mapStateToProps, actions)(Player);","map":{"version":3,"sources":["/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/Player.js"],"names":["React","Component","connect","ReactPlayer","PlayerIcon","Checkbox","FormControlLabel","MuiThemeProvider","colors","actions","music","document","getElementById","duration","pButton","playhead","timeline","timelineWidth","offsetWidth","addEventListener","play","timeUpdate","event","moveplayhead","currentTime","clickPercent","clientX","getPosition","mouseDown","window","mouseUp","onplayhead","removeEventListener","newMargLeft","style","marginLeft","playPercent","className","paused","pause","el","getBoundingClientRect","left","Player","state","loop","handleChange","setState","props","loopSound","console","log","url","selectedSprite","sound","djMode","mapStateToProps","sprite"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,IAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ,C,CAA8C;;AAC9C,IAAIC,QAAQ,GAAGH,KAAK,CAACG,QAArB,C,CAA+B;;AAC/B,IAAIC,OAAO,GAAGH,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAd,C,CAAkD;;AAClD,IAAIG,QAAQ,GAAGJ,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAf,C,CAAoD;;AACpD,IAAII,QAAQ,GAAGL,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAf,C,CAAoD;AAEpD;;AACA,IAAIK,aAAa,GAAGD,QAAQ,CAACE,WAAT,GAAuBH,QAAQ,CAACG,WAApD,C,CAEA;;AACAJ,OAAO,CAACK,gBAAR,CAAyB,OAAzB,EAAkCC,IAAlC,E,CAEA;;AACAV,KAAK,CAACS,gBAAN,CAAuB,YAAvB,EAAqCE,UAArC,EAAiD,KAAjD,E,CAEA;;AACAL,QAAQ,CAACG,gBAAT,CAA0B,OAA1B,EAAmC,UAASG,KAAT,EAAgB;AAC/CC,EAAAA,YAAY,CAACD,KAAD,CAAZ;AACAZ,EAAAA,KAAK,CAACc,WAAN,GAAoBX,QAAQ,GAAGY,YAAY,CAACH,KAAD,CAA3C;AACH,CAHD,EAGG,KAHH,E,CAKA;;AACA,SAASG,YAAT,CAAsBH,KAAtB,EAA6B;AACzB,SAAO,CAACA,KAAK,CAACI,OAAN,GAAgBC,WAAW,CAACX,QAAD,CAA5B,IAA0CC,aAAjD;AACH,C,CAED;;;AACAF,QAAQ,CAACI,gBAAT,CAA0B,WAA1B,EAAuCS,SAAvC,EAAkD,KAAlD;AACAC,MAAM,CAACV,gBAAP,CAAwB,SAAxB,EAAmCW,OAAnC,EAA4C,KAA5C,E,CAEA;;AACA,IAAIC,UAAU,GAAG,KAAjB,C,CAEA;;AACA,SAASH,SAAT,GAAqB;AACjBG,EAAAA,UAAU,GAAG,IAAb;AACAF,EAAAA,MAAM,CAACV,gBAAP,CAAwB,WAAxB,EAAqCI,YAArC,EAAmD,IAAnD;AACAb,EAAAA,KAAK,CAACsB,mBAAN,CAA0B,YAA1B,EAAwCX,UAAxC,EAAoD,KAApD;AACH,C,CAED;AACA;;;AACA,SAASS,OAAT,CAAiBR,KAAjB,EAAwB;AACpB,MAAIS,UAAU,IAAI,IAAlB,EAAwB;AACpBR,IAAAA,YAAY,CAACD,KAAD,CAAZ;AACAO,IAAAA,MAAM,CAACG,mBAAP,CAA2B,WAA3B,EAAwCT,YAAxC,EAAsD,IAAtD,EAFoB,CAGpB;;AACAb,IAAAA,KAAK,CAACc,WAAN,GAAoBX,QAAQ,GAAGY,YAAY,CAACH,KAAD,CAA3C;AACAZ,IAAAA,KAAK,CAACS,gBAAN,CAAuB,YAAvB,EAAqCE,UAArC,EAAiD,KAAjD;AACH;;AACDU,EAAAA,UAAU,GAAG,KAAb;AACH,C,CACD;AACA;;;AACA,SAASR,YAAT,CAAsBD,KAAtB,EAA6B;AACzB,MAAIW,WAAW,GAAGX,KAAK,CAACI,OAAN,GAAgBC,WAAW,CAACX,QAAD,CAA7C;;AAEA,MAAIiB,WAAW,IAAI,CAAf,IAAoBA,WAAW,IAAIhB,aAAvC,EAAsD;AAClDF,IAAAA,QAAQ,CAACmB,KAAT,CAAeC,UAAf,GAA4BF,WAAW,GAAG,IAA1C;AACH;;AACD,MAAIA,WAAW,GAAG,CAAlB,EAAqB;AACjBlB,IAAAA,QAAQ,CAACmB,KAAT,CAAeC,UAAf,GAA4B,KAA5B;AACH;;AACD,MAAIF,WAAW,GAAGhB,aAAlB,EAAiC;AAC7BF,IAAAA,QAAQ,CAACmB,KAAT,CAAeC,UAAf,GAA4BlB,aAAa,GAAG,IAA5C;AACH;AACJ,C,CAED;AACA;;;AACA,SAASI,UAAT,GAAsB;AAClB,MAAIe,WAAW,GAAGnB,aAAa,IAAIP,KAAK,CAACc,WAAN,GAAoBX,QAAxB,CAA/B;AACAE,EAAAA,QAAQ,CAACmB,KAAT,CAAeC,UAAf,GAA4BC,WAAW,GAAG,IAA1C;;AACA,MAAI1B,KAAK,CAACc,WAAN,IAAqBX,QAAzB,EAAmC;AAC/BC,IAAAA,OAAO,CAACuB,SAAR,GAAoB,EAApB;AACAvB,IAAAA,OAAO,CAACuB,SAAR,GAAoB,MAApB;AACH;AACJ,C,CAED;;;AACA,SAASjB,IAAT,GAAgB;AACZ;AACA,MAAIV,KAAK,CAAC4B,MAAV,EAAkB;AACd5B,IAAAA,KAAK,CAACU,IAAN,GADc,CAEd;;AACAN,IAAAA,OAAO,CAACuB,SAAR,GAAoB,EAApB;AACAvB,IAAAA,OAAO,CAACuB,SAAR,GAAoB,OAApB;AACH,GALD,MAKO;AAAE;AACL3B,IAAAA,KAAK,CAAC6B,KAAN,GADG,CAEH;;AACAzB,IAAAA,OAAO,CAACuB,SAAR,GAAoB,EAApB;AACAvB,IAAAA,OAAO,CAACuB,SAAR,GAAoB,MAApB;AACH;AACJ,C,CAED;;;AACA3B,KAAK,CAACS,gBAAN,CAAuB,gBAAvB,EAAyC,YAAW;AAChDN,EAAAA,QAAQ,GAAGH,KAAK,CAACG,QAAjB;AACH,CAFD,EAEG,KAFH,E,CAIA;AACA;;AACA,SAASc,WAAT,CAAqBa,EAArB,EAAyB;AACrB,SAAOA,EAAE,CAACC,qBAAH,GAA2BC,IAAlC;AACH;;IAGKC,M;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE,KADA;AAENP,MAAAA,MAAM,EAAE,KAFF;AAGNd,MAAAA,WAAW,EAAE;AAHP,K;;UAMRsB,Y,GAAe,YAAM;AACnB,YAAKC,QAAL,CAAc;AACZF,QAAAA,IAAI,EAAE,CAAC,MAAKD,KAAL,CAAWC;AADN,OAAd;;AAGA,YAAKG,KAAL,CAAWC,SAAX;AACD,K;;UAED7B,I,GAAO,YAAM;AACX,YAAK2B,QAAL,CAAc;AACZT,QAAAA,MAAM,EAAE,CAAC,MAAKM,KAAL,CAAWN;AADR,OAAd;AAGD,K;;;;;;;6BAEO;AACNY,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2B,KAAKH,KAAhC;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B,KAAKP,KAAjC;AACA,UAAIQ,GAAJ;;AACA,UAAG,KAAKJ,KAAL,CAAWK,cAAX,CAA0BC,KAA7B,EAAmC;AACjCF,QAAAA,GAAG,GAAG,KAAKJ,KAAL,CAAWK,cAAX,CAA0BC,KAA1B,CAAgCF,GAAtC,CADiC,CAEjC;AACD,OAHD,MAGK;AACHA,QAAAA,GAAG,GAAG,UAAN;AACD,OATK,CAUJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA,aACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAO,QAAA,EAAE,EAAC,OAAV;AAAkB,QAAA,OAAO,EAAC,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,GAAG,EAAC,oDAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEM;AAAQ,QAAA,GAAG,EAAC,oDAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFN,CADA,EAKE;AAAK,QAAA,EAAE,EAAC,aAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAQ,QAAA,EAAE,EAAC,SAAX;AAAqB,QAAA,KAAK,EAAC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,EAEA;AAAK,QAAA,EAAE,EAAC,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACM;AAAK,QAAA,EAAE,EAAC,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADN,CAFA,CALF,EAWE,oBAAC,gBAAD;AAAkB,QAAA,KAAK,EAAE5C,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,CAAC,KAAKwC,KAAL,CAAWO,MAAZ,GAED,oBAAC,gBAAD;AACA,QAAA,QAAQ,EAAE,CAAC,KAAKP,KAAL,CAAWK,cAAX,CAA0BC,KAA3B,GAAmC,IAAnC,GAA0C,KADpD;AAEA,QAAA,OAAO,EACL,oBAAC,QAAD;AACE,UAAA,OAAO,EAAE,KAAKV,KAAL,CAAWC,IADtB;AAEE,UAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,IAFpB;AAGE,UAAA,QAAQ,EAAE,KAAKC,YAHjB;AAIE,UAAA,KAAK,EAAC,SAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF;AAUA,QAAA,KAAK,EAAC,MAVN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFC,GAaG,IAdJ,CAXF,CADF;AA8BD;;;;EApFgB7C,S;;AAuFrB,SAASuD,eAAT,CAAyBZ,KAAzB,EAAgC;AAC9B,SAAO;AACLS,IAAAA,cAAc,EAAET,KAAK,CAACa,MAAN,CAAaJ,cADxB;AAELE,IAAAA,MAAM,EAAEX,KAAK,CAACU,KAAN,CAAYC;AAFf,GAAP;AAID,C,CAED;AACA;AACA;AACA;AACA;;;AAEA,eAAerD,OAAO,CAACsD,eAAD,EAAkB/C,OAAlB,CAAP,CAAkCkC,MAAlC,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport ReactPlayer from 'react-player'\nimport { PlayerIcon } from 'react-player-controls'\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport { colors } from '../App'\nimport * as actions from '../actions/sound'\n\nvar music = document.getElementById('music'); // id for audio element\nvar duration = music.duration; // Duration of audio clip, calculated here for embedding purposes\nvar pButton = document.getElementById('pButton'); // play button\nvar playhead = document.getElementById('playhead'); // playhead\nvar timeline = document.getElementById('timeline'); // timeline\n\n// timeline width adjusted for playhead\nvar timelineWidth = timeline.offsetWidth - playhead.offsetWidth;\n\n// play button event listenter\npButton.addEventListener(\"click\", play);\n\n// timeupdate event listener\nmusic.addEventListener(\"timeupdate\", timeUpdate, false);\n\n// makes timeline clickable\ntimeline.addEventListener(\"click\", function(event) {\n    moveplayhead(event);\n    music.currentTime = duration * clickPercent(event);\n}, false);\n\n// returns click as decimal (.77) of the total timelineWidth\nfunction clickPercent(event) {\n    return (event.clientX - getPosition(timeline)) / timelineWidth;\n}\n\n// makes playhead draggable\nplayhead.addEventListener('mousedown', mouseDown, false);\nwindow.addEventListener('mouseup', mouseUp, false);\n\n// Boolean value so that audio position is updated only when the playhead is released\nvar onplayhead = false;\n\n// mouseDown EventListener\nfunction mouseDown() {\n    onplayhead = true;\n    window.addEventListener('mousemove', moveplayhead, true);\n    music.removeEventListener('timeupdate', timeUpdate, false);\n}\n\n// mouseUp EventListener\n// getting input from all mouse clicks\nfunction mouseUp(event) {\n    if (onplayhead == true) {\n        moveplayhead(event);\n        window.removeEventListener('mousemove', moveplayhead, true);\n        // change current time\n        music.currentTime = duration * clickPercent(event);\n        music.addEventListener('timeupdate', timeUpdate, false);\n    }\n    onplayhead = false;\n}\n// mousemove EventListener\n// Moves playhead as user drags\nfunction moveplayhead(event) {\n    var newMargLeft = event.clientX - getPosition(timeline);\n\n    if (newMargLeft >= 0 && newMargLeft <= timelineWidth) {\n        playhead.style.marginLeft = newMargLeft + \"px\";\n    }\n    if (newMargLeft < 0) {\n        playhead.style.marginLeft = \"0px\";\n    }\n    if (newMargLeft > timelineWidth) {\n        playhead.style.marginLeft = timelineWidth + \"px\";\n    }\n}\n\n// timeUpdate\n// Synchronizes playhead position with current point in audio\nfunction timeUpdate() {\n    var playPercent = timelineWidth * (music.currentTime / duration);\n    playhead.style.marginLeft = playPercent + \"px\";\n    if (music.currentTime == duration) {\n        pButton.className = \"\";\n        pButton.className = \"play\";\n    }\n}\n\n//Play and Pause\nfunction play() {\n    // start music\n    if (music.paused) {\n        music.play();\n        // remove play, add pause\n        pButton.className = \"\";\n        pButton.className = \"pause\";\n    } else { // pause music\n        music.pause();\n        // remove pause, add play\n        pButton.className = \"\";\n        pButton.className = \"play\";\n    }\n}\n\n// Gets audio file duration\nmusic.addEventListener(\"canplaythrough\", function() {\n    duration = music.duration;\n}, false);\n\n// getPosition\n// Returns elements left position relative to top-left of viewport\nfunction getPosition(el) {\n    return el.getBoundingClientRect().left;\n}\n\n\nclass Player extends Component{\n  state = {\n    loop: false,\n    paused: false,\n    currentTime: null\n  }\n\n  handleChange = () => {\n    this.setState({\n      loop: !this.state.loop\n    })\n    this.props.loopSound()\n  }\n\n  play = () => {\n    this.setState({\n      paused: !this.state.paused\n    })\n  }\n\n  render(){\n    console.log('PLAYER PROPS',this.props)\n    console.log('PLAYER STATE', this.state)\n    let url;\n    if(this.props.selectedSprite.sound){\n      url = this.props.selectedSprite.sound.url\n      // loop = this.props.selectedSprite.sound.loop\n    }else{\n      url = \"test.mp3\"\n    }\n      // return(\n      //   <div className=\"player\">\n      //     <ReactPlayer className=\"react-player\" width={275} height={60} url={url} playing={this.props.djMode ? false : true} controls={this.props.djMode ? false : true} loop={this.state.loop}/><br/>\n      //     <MuiThemeProvider theme={colors}>\n      //     {!this.props.djMode ?\n      //     (\n      //     <FormControlLabel\n      //     disabled={!this.props.selectedSprite.sound ? true : false}\n      //     control={\n      //       <Checkbox\n      //         checked={this.state.loop}\n      //         value={this.state.loop}\n      //         onChange={this.handleChange}\n      //         color=\"primary\"\n      //       />\n      //     }\n      //     label=\"LOOP\"\n      //   />) : null}\n      //   </MuiThemeProvider>\n      //   </div>\n      // )\n\n\n\n      return(\n        <div className=\"player\">\n        <audio id=\"music\" preload=\"true\">\n          <source src=\"http://www.alexkatz.me/codepen/music/interlude.mp3\"/>\n              <source src=\"http://www.alexkatz.me/codepen/music/interlude.ogg\"/>\n          </audio>\n          <div id=\"audioplayer\">\n          <button id=\"pButton\" class=\"play\"></button>\n          <div id=\"timeline\">\n                <div id=\"playhead\"></div>\n          </div>\n          </div>\n          <MuiThemeProvider theme={colors}>\n          {!this.props.djMode ?\n          (\n          <FormControlLabel\n          disabled={!this.props.selectedSprite.sound ? true : false}\n          control={\n            <Checkbox\n              checked={this.state.loop}\n              value={this.state.loop}\n              onChange={this.handleChange}\n              color=\"primary\"\n            />\n          }\n          label=\"LOOP\"\n        />) : null}\n        </MuiThemeProvider>\n        </div>\n      )\n    }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedSprite: state.sprite.selectedSprite,\n    djMode: state.sound.djMode\n  }\n}\n\n// function mapDispatchToProps(dispatch){\n//   return {\n//\n//   }\n// }\n\nexport default connect(mapStateToProps, actions)(Player);\n"]},"metadata":{},"sourceType":"module"}