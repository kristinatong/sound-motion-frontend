{"ast":null,"code":"import _classCallCheck from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/Video.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'; // import * as actions from '../redux/actions';\n// import { changeSprite } from '../actions/sprite'\n// import Konva from 'konva';\n\nimport { Stage, Layer } from 'react-konva';\nimport SpriteList from './SpriteList';\nimport ControlBar from './ControlBar';\nimport UploadSound from './UploadSound';\nimport { DiffCamEngine } from './diff-cam-engine'; // import * from './adapter-1.0.7'\n\nvar stream; // stream obtained from webcam\n\nvar video; // shows stream\n\nvar captureCanvas; // internal canvas for capturing full images from video\n\nvar captureContext; // context for capture canvas\n\nvar diffCanvas; // internal canvas for diffing downscaled captures\n\nvar diffContext; // context for diff canvas\n\nvar motionCanvas; // receives processed diff images\n\nvar motionContext; // context for motion canvas\n\nvar initSuccessCallback; // called when init succeeds\n\nvar initErrorCallback; // called when init fails\n\nvar startCompleteCallback; // called when start is complete\n\nvar captureCallback; // called when an image has been captured and diffed\n\nvar captureInterval; // interval for continuous captures\n\nvar captureIntervalTime; // time between captures, in ms\n\nvar captureWidth; // full captured image width\n\nvar captureHeight; // full captured image height\n\nvar diffWidth; // downscaled width for diff/motion\n\nvar diffHeight; // downscaled height for diff/motion\n\nvar isReadyToDiff; // has a previous capture been made to diff against?\n\nvar pixelDiffThreshold; // min for a pixel to be considered significant\n\nvar scoreThreshold; // min for an image to be considered significant\n\nvar includeMotionBox; // flag to calculate and draw motion bounding box\n\nvar includeMotionPixels; // flag to create object denoting pixels with motion\n\nvar coords;\nvar testContext;\nvar test;\n\nvar Video =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Video, _Component);\n\n  function Video() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Video);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Video)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      x: 0,\n      y: 0,\n      // bottom: 0,\n      // height: 0,\n      left: 0,\n      // right: 0,\n      top: 0,\n      width: 0 // captureInterval: null,\n      // video: document.getElementById('video'),\n      // motionCanvas : document.createElement('canvas'),\n      // captureIntervalTime: 100,\n      // captureWidth: 640,\n      // captureHeight: 480,\n      // diffWidth: 64,\n      // diffHeight: 48,\n      // pixelDiffThreshold: 32,\n      // scoreThreshold: 16,\n      // includeMotionBox: false,\n      // includeMotionPixels: false,\n\n    };\n\n    _this.getMotion = function () {\n      var canvas = document.getElementById('motion');\n      var video = document.getElementById('video'); // var video = document.createElement('video')\n\n      var score = document.getElementById('score');\n      var test = document.getElementById('test'); // var canvas = this.refs.motion;\n      // var video = this.refs.video\n      // var score = document.getElementById('score');\n      // var test = this.refs.test\n      // let captureInterval = setInterval(DiffCamEngine.capture, 100);\n      // console.log('captureinterval',captureInterval)\n      // this.setState({\n      //   captureInterval: captureInterval\n      // })\n\n      function initSuccess() {\n        DiffCamEngine.start();\n      }\n\n      function initError() {\n        alert('Something went wrong.');\n      }\n\n      function capture(payload) {\n        score.textContent = payload.score;\n      }\n\n      DiffCamEngine.init({\n        video: video,\n        test: test,\n        motionCanvas: canvas,\n        initSuccessCallback: initSuccess,\n        initErrorCallback: initError,\n        captureCallback: capture\n      }); // this.requestWebcam();\n    };\n\n    _this.initSuccess = function (requestedStream) {\n      console.log(requestedStream);\n      stream = requestedStream; // console.log(initSuccessCallback)\n      // initSuccessCallback();\n\n      _this.start();\n    };\n\n    _this.start = function () {\n      // video = document.getElementById('video');\n      video = document.createElement('video');\n      video.autoplay = true;\n\n      if (!stream) {\n        throw 'Cannot start after init fail';\n      } // streaming takes a moment to start\n\n\n      video.addEventListener('canplay', _this.startComplete);\n      video.srcObject = stream;\n    };\n\n    _this.startComplete = function () {\n      video.removeEventListener('canplay', _this.startComplete);\n      captureInterval = setInterval(_this.capture, captureIntervalTime);\n    };\n\n    _this.drawSprites = function () {\n      if (_this.props.canvasSprites) {\n        _this.props.canvasSprites.map(function (sprite) {\n          console.log('SPRITE POSITION', sprite.position);\n          var image = new window.Image();\n          image.src = sprite.sprite.url;\n\n          image.onload = function () {\n            testContext.save();\n            testContext.scale(-1, 1);\n            testContext.drawImage(image, sprite.position.x - test.width + 60, sprite.position.y, -60, 60);\n            testContext.restore();\n          };\n        });\n      } // this.props.canvasSprites.map(sprite => {\n      //   const image = new window.Image();\n      //   image.src = sprite.sprite.url\n      //   image.onload = () => {\n      //     testContext.save()\n      //     testContext.scale(-1,1)\n      //     testContext.drawImage(image, sprite.position.x-test.width+60, sprite.position.y, -60, 60)\n      //     testContext.restore()\n      //   }\n      // })\n\n    };\n\n    _this.capture = function () {\n      // save a full-sized copy of capture\n      captureContext.drawImage(video, 0, 0, captureWidth, captureHeight);\n      var captureImageData = captureContext.getImageData(0, 0, captureWidth, captureHeight);\n      testContext.drawImage(video, 0, 0, captureWidth, captureHeight); // const drawSprites = () => {\n      //   return this.props.canvasSprites.map(sprite => {\n      //     const image = new window.Image();\n      //     image.src = sprite.sprite.url\n      //     image.onload = () => {\n      //       testContext.save()\n      //       testContext.scale(-1,1)\n      //       testContext.drawImage(image, sprite.position.x-test.width+60, sprite.position.y, -60, 60)\n      //       testContext.restore()\n      //     }\n      //   })\n      // }\n\n      _this.drawSprites(); // diff current capture over previous capture, leftover from last time\n\n\n      diffContext.globalCompositeOperation = 'difference';\n      diffContext.drawImage(video, 0, 0, diffWidth, diffHeight);\n      var diffImageData = diffContext.getImageData(0, 0, diffWidth, diffHeight);\n      console.log('diffImageData', diffImageData); //\n      // if (isReadyToDiff) {\n      //   var diff = this.processDiff(diffImageData);\n      //\n      //   motionContext.putImageData(diffImageData, 0, 0);\n      //   if (diff.motionBox) {\n      //     motionContext.strokeStyle = '#fff';\n      //     motionContext.strokeRect(\n      //       diff.motionBox.x.min + 0.5,\n      //       diff.motionBox.y.min + 0.5,\n      //       diff.motionBox.x.max - diff.motionBox.x.min,\n      //       diff.motionBox.y.max - diff.motionBox.y.min\n      //     );\n      //   }\n      //   captureCallback({\n      //     imageData: captureImageData,\n      //     score: diff.score,\n      //     hasMotion: diff.score >= scoreThreshold,\n      //     motionBox: diff.motionBox,\n      //     motionPixels: diff.motionPixels,\n      //     getURL: function() {\n      //       return this.getCaptureUrl(this.imageData);\n      //     },\n      //     checkMotionPixel: function(x, y) {\n      //       return this.checkMotionPixel(this.motionPixels, x, y)\n      //     }\n      //   });\n      // }\n      //\n      // // draw current capture normally over diff, ready for next time\n      // diffContext.globalCompositeOperation = 'source-over';\n      // diffContext.drawImage(video, 0, 0, diffWidth, diffHeight);\n      // isReadyToDiff = true;\n    };\n\n    return _this;\n  }\n\n  _createClass(Video, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var spriteCanvas = document.getElementsByClassName('konvajs-content')[0].getBoundingClientRect();\n      debugger;\n      this.setState({\n        x: spriteCanvas.x,\n        y: spriteCanvas.y,\n        // bottom: spriteCanvas.bottom,\n        // height: spriteCanvas.height,\n        left: spriteCanvas.left,\n        // right: spriteCanvas.right,\n        top: spriteCanvas.top,\n        width: spriteCanvas.width // captureWidth: spriteCanvas.width,\n        // captureHeight: spriteCanvas.height,\n\n      });\n      motionCanvas = this.refs.motion;\n      test = this.refs.test; // prep video\n      // non-configurable\n\n      captureCanvas = document.createElement('canvas');\n      diffCanvas = document.createElement('canvas');\n      isReadyToDiff = false; // prep capture canvas\n\n      captureWidth = spriteCanvas.width;\n      captureHeight = spriteCanvas.height;\n      captureCanvas.width = captureWidth;\n      captureCanvas.height = captureHeight;\n      captureContext = captureCanvas.getContext('2d'); // prep diff canvas\n\n      diffWidth = 64;\n      diffHeight = 48;\n      diffCanvas.width = diffWidth;\n      diffCanvas.height = diffHeight;\n      diffContext = diffCanvas.getContext('2d'); // prep motion canvas\n\n      motionCanvas.width = diffWidth;\n      motionCanvas.height = diffHeight;\n      motionContext = motionCanvas.getContext('2d'); //test canvas\n\n      test.width = diffWidth;\n      test.height = diffHeight;\n      testContext = test.getContext('2d');\n      captureIntervalTime = 100;\n      pixelDiffThreshold = 32;\n      scoreThreshold = 16;\n      includeMotionBox = false;\n      includeMotionPixels = false;\n\n      captureCallback = function captureCallback() {}; // const drawSprites = () => {\n      //   return this.props.canvasSprites.map(sprite => {\n      //     const image = new window.Image();\n      //     image.src = sprite.sprite.url\n      //     image.onload = () => {\n      //       testContext.save()\n      //       testContext.scale(-1,1)\n      //       testContext.drawImage(image, sprite.position.x-test.width+60, sprite.position.y, -60, 60)\n      //       testContext.restore()\n      //       // testContext.scale(-1,1)\n      //       // testContext.drawImage(image, spriteCanvas.width-(60+sprite.position.x), sprite.position.y, 60, 60)\n      //     }\n      //   })\n      // }\n      // this.drawSprites()\n\n\n      this.requestWebcam();\n    }\n  }, {\n    key: \"requestWebcam\",\n    // captureCallback(payload) {\n    //   score.textContent = payload.score;\n    // }\n    value: function requestWebcam() {\n      var constraints = {\n        audio: false,\n        video: {\n          width: captureWidth,\n          height: captureHeight\n        }\n      };\n      navigator.mediaDevices.getUserMedia(constraints).then(this.initSuccess).catch(this.initError);\n    }\n  }, {\n    key: \"initError\",\n    value: function initError(error) {\n      console.log(error);\n      alert('Something went wrong.');\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      clearInterval(captureInterval);\n      video.src = '';\n      motionContext.clearRect(0, 0, diffWidth, diffHeight);\n      isReadyToDiff = false;\n    }\n  }, {\n    key: \"processDiff\",\n    value: function processDiff(diffImageData) {\n      var rgba = diffImageData.data; // pixel adjustments are done by reference directly on diffImageData\n\n      var score = 0;\n      var motionPixels = includeMotionPixels ? [] : undefined;\n      var motionBox = undefined;\n\n      for (var i = 0; i < rgba.length; i += 4) {\n        var pixelDiff = rgba[i] * 0.3 + rgba[i + 1] * 0.6 + rgba[i + 2] * 0.1;\n        var normalized = Math.min(255, pixelDiff * (255 / pixelDiffThreshold));\n        rgba[i] = 0;\n        rgba[i + 1] = normalized;\n        rgba[i + 2] = 0;\n\n        if (pixelDiff >= pixelDiffThreshold) {\n          score++;\n          coords = this.calculateCoordinates(i / 4);\n\n          if (includeMotionBox) {\n            motionBox = this.calculateMotionBox(motionBox, coords.x, coords.y);\n          }\n\n          if (includeMotionPixels) {\n            motionPixels = this.calculateMotionPixels(motionPixels, coords.x, coords.y, pixelDiff);\n          }\n        }\n      }\n\n      return {\n        score: score,\n        motionBox: score > scoreThreshold ? motionBox : undefined,\n        motionPixels: motionPixels\n      };\n    }\n  }, {\n    key: \"calculateCoordinates\",\n    value: function calculateCoordinates(pixelIndex) {\n      return {\n        x: pixelIndex % diffWidth,\n        y: Math.floor(pixelIndex / diffWidth)\n      };\n    }\n  }, {\n    key: \"calculateMotionBox\",\n    value: function calculateMotionBox(currentMotionBox, x, y) {\n      // init motion box on demand\n      var motionBox = currentMotionBox || {\n        x: {\n          min: coords.x,\n          max: x\n        },\n        y: {\n          min: coords.y,\n          max: y\n        }\n      };\n      motionBox.x.min = Math.min(motionBox.x.min, x);\n      motionBox.x.max = Math.max(motionBox.x.max, x);\n      motionBox.y.min = Math.min(motionBox.y.min, y);\n      motionBox.y.max = Math.max(motionBox.y.max, y);\n      return motionBox;\n    }\n  }, {\n    key: \"calculateMotionPixels\",\n    value: function calculateMotionPixels(motionPixels, x, y, pixelDiff) {\n      motionPixels[x] = motionPixels[x] || [];\n      motionPixels[x][y] = true;\n      return motionPixels;\n    }\n  }, {\n    key: \"getCaptureUrl\",\n    value: function getCaptureUrl(captureImageData) {\n      // may as well borrow captureCanvas\n      captureContext.putImageData(captureImageData, 0, 0);\n      return captureCanvas.toDataURL();\n    }\n  }, {\n    key: \"checkMotionPixel\",\n    value: function checkMotionPixel(motionPixels, x, y) {\n      return motionPixels && motionPixels[x] && motionPixels[x][y];\n    }\n  }, {\n    key: \"getPixelDiffThreshold\",\n    value: function getPixelDiffThreshold() {\n      return pixelDiffThreshold;\n    }\n  }, {\n    key: \"setPixelDiffThreshold\",\n    value: function setPixelDiffThreshold(val) {\n      pixelDiffThreshold = val;\n    }\n  }, {\n    key: \"getScoreThreshold\",\n    value: function getScoreThreshold() {\n      return scoreThreshold;\n    }\n  }, {\n    key: \"setScoreThreshold\",\n    value: function setScoreThreshold(val) {\n      scoreThreshold = val;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log('VIDEO STATE', this.state);\n      var videoStyle = {\n        top: 0,\n        left: 0,\n        position: 'absolute',\n        zIndex: 4 // background: 'gray',\n\n      };\n      var motionStyle = {\n        top: this.state.top,\n        left: this.state.left,\n        position: 'absolute',\n        zIndex: -1 // background: 'gray',\n\n      };\n      var testStyle = {\n        top: this.state.top,\n        left: this.state.left,\n        position: 'absolute',\n        zIndex: 4,\n        background: 'black',\n        transform: 'rotateY(180deg)',\n        WebkitTransform: 'rotateY(180deg)',\n        MozTransform: 'rotateY(180deg)'\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 451\n        },\n        __self: this\n      }, this.props.stopVideo ? this.stop() : null, React.createElement(\"video\", {\n        id: \"video\",\n        style: videoStyle,\n        width: this.state.width,\n        height: this.state.height,\n        ref: \"video\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453\n        },\n        __self: this\n      }), React.createElement(\"canvas\", {\n        id: \"motion\",\n        style: motionStyle,\n        width: this.state.width,\n        height: this.state.height,\n        ref: \"motion\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454\n        },\n        __self: this\n      }), React.createElement(\"canvas\", {\n        id: \"test\",\n        style: testStyle,\n        width: this.state.width,\n        height: this.state.height,\n        ref: \"test\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        id: \"score\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456\n        },\n        __self: this\n      }), React.createElement(\"script\", {\n        src: \"https://webrtc.github.io/adapter/adapter-1.0.7.js\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Video;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    canvasSprites: state.sprite.canvasSprites,\n    stopVideo: state.sound.stopVideo\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Video);","map":{"version":3,"sources":["/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/Video.js"],"names":["React","Component","connect","Stage","Layer","SpriteList","ControlBar","UploadSound","DiffCamEngine","stream","video","captureCanvas","captureContext","diffCanvas","diffContext","motionCanvas","motionContext","initSuccessCallback","initErrorCallback","startCompleteCallback","captureCallback","captureInterval","captureIntervalTime","captureWidth","captureHeight","diffWidth","diffHeight","isReadyToDiff","pixelDiffThreshold","scoreThreshold","includeMotionBox","includeMotionPixels","coords","testContext","test","Video","state","x","y","left","top","width","getMotion","canvas","document","getElementById","score","initSuccess","start","initError","alert","capture","payload","textContent","init","requestedStream","console","log","createElement","autoplay","addEventListener","startComplete","srcObject","removeEventListener","setInterval","drawSprites","props","canvasSprites","map","sprite","position","image","window","Image","src","url","onload","save","scale","drawImage","restore","captureImageData","getImageData","globalCompositeOperation","diffImageData","spriteCanvas","getElementsByClassName","getBoundingClientRect","setState","refs","motion","height","getContext","requestWebcam","constraints","audio","navigator","mediaDevices","getUserMedia","then","catch","error","clearInterval","clearRect","rgba","data","motionPixels","undefined","motionBox","i","length","pixelDiff","normalized","Math","min","calculateCoordinates","calculateMotionBox","calculateMotionPixels","pixelIndex","floor","currentMotionBox","max","putImageData","toDataURL","val","videoStyle","zIndex","motionStyle","testStyle","background","transform","WebkitTransform","MozTransform","stopVideo","stop","mapStateToProps","sound","mapDispatchToProps","dispatch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;AACA;AACA;;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,aAA7B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,aAAT,QAA8B,mBAA9B,C,CACA;;AAEE,IAAIC,MAAJ,C,CAAgB;;AACjB,IAAIC,KAAJ,C,CAAe;;AACf,IAAIC,aAAJ,C,CAAqB;;AACrB,IAAIC,cAAJ,C,CAAsB;;AACtB,IAAIC,UAAJ,C,CAAmB;;AACnB,IAAIC,WAAJ,C,CAAmB;;AACnB,IAAIC,YAAJ,C,CAAoB;;AACpB,IAAIC,aAAJ,C,CAAqB;;AAErB,IAAIC,mBAAJ,C,CAAyB;;AACzB,IAAIC,iBAAJ,C,CAAwB;;AACxB,IAAIC,qBAAJ,C,CAA2B;;AAC3B,IAAIC,eAAJ,C,CAAsB;;AAEtB,IAAIC,eAAJ,C,CAAsB;;AACtB,IAAIC,mBAAJ,C,CAAyB;;AACzB,IAAIC,YAAJ,C,CAAoB;;AACpB,IAAIC,aAAJ,C,CAAqB;;AACrB,IAAIC,SAAJ,C,CAAkB;;AAClB,IAAIC,UAAJ,C,CAAmB;;AACnB,IAAIC,aAAJ,C,CAAqB;;AACrB,IAAIC,kBAAJ,C,CAAyB;;AACzB,IAAIC,cAAJ,C,CAAsB;;AACtB,IAAIC,gBAAJ,C,CAAuB;;AACvB,IAAIC,mBAAJ,C,CAAyB;;AACxB,IAAIC,MAAJ;AACA,IAAIC,WAAJ;AACA,IAAIC,IAAJ;;IAEIC,K;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,CAAC,EAAE,CADG;AAENC,MAAAA,CAAC,EAAE,CAFG;AAGN;AACA;AACAC,MAAAA,IAAI,EAAE,CALA;AAMN;AACAC,MAAAA,GAAG,EAAE,CAPC;AAQNC,MAAAA,KAAK,EAAE,CARD,CASN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AApBM,K;;UAsGRC,S,GAAY,YAAM;AAChB,UAAIC,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAb;AACA,UAAInC,KAAK,GAAGkC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ,CAFgB,CAGhB;;AACA,UAAIC,KAAK,GAAGF,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AACA,UAAIX,IAAI,GAAGU,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAX,CALgB,CAMhB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,eAASE,WAAT,GAAuB;AACrBvC,QAAAA,aAAa,CAACwC,KAAd;AACD;;AAED,eAASC,SAAT,GAAqB;AACnBC,QAAAA,KAAK,CAAC,uBAAD,CAAL;AACD;;AAED,eAASC,OAAT,CAAiBC,OAAjB,EAA0B;AACxBN,QAAAA,KAAK,CAACO,WAAN,GAAoBD,OAAO,CAACN,KAA5B;AACD;;AAEDtC,MAAAA,aAAa,CAAC8C,IAAd,CAAmB;AACjB5C,QAAAA,KAAK,EAAEA,KADU;AAEjBwB,QAAAA,IAAI,EAAEA,IAFW;AAGjBnB,QAAAA,YAAY,EAAE4B,MAHG;AAIjB1B,QAAAA,mBAAmB,EAAE8B,WAJJ;AAKjB7B,QAAAA,iBAAiB,EAAE+B,SALF;AAMjB7B,QAAAA,eAAe,EAAE+B;AANA,OAAnB,EA7BgB,CAqChB;AACD,K;;UAmBDJ,W,GAAc,UAACQ,eAAD,EAAqB;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,eAAZ;AACA9C,MAAAA,MAAM,GAAG8C,eAAT,CAFiC,CAGjC;AACA;;AACA,YAAKP,KAAL;AACD,K;;UAODA,K,GAAQ,YAAM;AACZ;AACAtC,MAAAA,KAAK,GAAGkC,QAAQ,CAACc,aAAT,CAAuB,OAAvB,CAAR;AACAhD,MAAAA,KAAK,CAACiD,QAAN,GAAiB,IAAjB;;AACA,UAAI,CAAClD,MAAL,EAAa;AACX,cAAM,8BAAN;AACD,OANW,CAQZ;;;AACAC,MAAAA,KAAK,CAACkD,gBAAN,CAAuB,SAAvB,EAAkC,MAAKC,aAAvC;AACAnD,MAAAA,KAAK,CAACoD,SAAN,GAAkBrD,MAAlB;AACD,K;;UAEDoD,a,GAAgB,YAAM;AACpBnD,MAAAA,KAAK,CAACqD,mBAAN,CAA0B,SAA1B,EAAqC,MAAKF,aAA1C;AACAxC,MAAAA,eAAe,GAAG2C,WAAW,CAAC,MAAKb,OAAN,EAAe7B,mBAAf,CAA7B;AACD,K;;UASD2C,W,GAAc,YAAM;AAClB,UAAG,MAAKC,KAAL,CAAWC,aAAd,EAA4B;AAC1B,cAAKD,KAAL,CAAWC,aAAX,CAAyBC,GAAzB,CAA6B,UAAAC,MAAM,EAAI;AACrCb,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BY,MAAM,CAACC,QAAtC;AACA,cAAMC,KAAK,GAAG,IAAIC,MAAM,CAACC,KAAX,EAAd;AACAF,UAAAA,KAAK,CAACG,GAAN,GAAYL,MAAM,CAACA,MAAP,CAAcM,GAA1B;;AACAJ,UAAAA,KAAK,CAACK,MAAN,GAAe,YAAM;AACnB3C,YAAAA,WAAW,CAAC4C,IAAZ;AACA5C,YAAAA,WAAW,CAAC6C,KAAZ,CAAkB,CAAC,CAAnB,EAAqB,CAArB;AACA7C,YAAAA,WAAW,CAAC8C,SAAZ,CAAsBR,KAAtB,EAA6BF,MAAM,CAACC,QAAP,CAAgBjC,CAAhB,GAAkBH,IAAI,CAACO,KAAvB,GAA6B,EAA1D,EAA8D4B,MAAM,CAACC,QAAP,CAAgBhC,CAA9E,EAAiF,CAAC,EAAlF,EAAsF,EAAtF;AACAL,YAAAA,WAAW,CAAC+C,OAAZ;AACD,WALD;AAMD,SAVD;AAWD,OAbiB,CAclB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,K;;UAED7B,O,GAAU,YAAM;AACd;AACAvC,MAAAA,cAAc,CAACmE,SAAf,CAAyBrE,KAAzB,EAAgC,CAAhC,EAAmC,CAAnC,EAAsCa,YAAtC,EAAoDC,aAApD;AACA,UAAIyD,gBAAgB,GAAGrE,cAAc,CAACsE,YAAf,CAA4B,CAA5B,EAA+B,CAA/B,EAAkC3D,YAAlC,EAAgDC,aAAhD,CAAvB;AACAS,MAAAA,WAAW,CAAC8C,SAAZ,CAAsBrE,KAAtB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmCa,YAAnC,EAAiDC,aAAjD,EAJc,CAKd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,YAAKyC,WAAL,GAjBc,CAkBd;;;AACAnD,MAAAA,WAAW,CAACqE,wBAAZ,GAAuC,YAAvC;AACArE,MAAAA,WAAW,CAACiE,SAAZ,CAAsBrE,KAAtB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmCe,SAAnC,EAA8CC,UAA9C;AACA,UAAI0D,aAAa,GAAGtE,WAAW,CAACoE,YAAZ,CAAyB,CAAzB,EAA4B,CAA5B,EAA+BzD,SAA/B,EAA0CC,UAA1C,CAApB;AACA8B,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4B2B,aAA5B,EAtBc,CAuBd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,K;;;;;;;wCAhQmB;AAClB,UAAIC,YAAY,GAAGzC,QAAQ,CAAC0C,sBAAT,CAAgC,iBAAhC,EAAmD,CAAnD,EAAsDC,qBAAtD,EAAnB;AACA;AAEA,WAAKC,QAAL,CAAc;AACZnD,QAAAA,CAAC,EAAEgD,YAAY,CAAChD,CADJ;AAEZC,QAAAA,CAAC,EAAE+C,YAAY,CAAC/C,CAFJ;AAGZ;AACA;AACAC,QAAAA,IAAI,EAAE8C,YAAY,CAAC9C,IALP;AAMZ;AACAC,QAAAA,GAAG,EAAE6C,YAAY,CAAC7C,GAPN;AAQZC,QAAAA,KAAK,EAAE4C,YAAY,CAAC5C,KARR,CASZ;AACA;;AAVY,OAAd;AAaA1B,MAAAA,YAAY,GAAG,KAAK0E,IAAL,CAAUC,MAAzB;AACAxD,MAAAA,IAAI,GAAG,KAAKuD,IAAL,CAAUvD,IAAjB,CAlBkB,CAoBlB;AAEA;;AACAvB,MAAAA,aAAa,GAAGiC,QAAQ,CAACc,aAAT,CAAuB,QAAvB,CAAhB;AACA7C,MAAAA,UAAU,GAAG+B,QAAQ,CAACc,aAAT,CAAuB,QAAvB,CAAb;AACA/B,MAAAA,aAAa,GAAG,KAAhB,CAzBkB,CA2BlB;;AACAJ,MAAAA,YAAY,GAAE8D,YAAY,CAAC5C,KAA3B;AACAjB,MAAAA,aAAa,GAAE6D,YAAY,CAACM,MAA5B;AACAhF,MAAAA,aAAa,CAAC8B,KAAd,GAAsBlB,YAAtB;AACAZ,MAAAA,aAAa,CAACgF,MAAd,GAAuBnE,aAAvB;AACAZ,MAAAA,cAAc,GAAGD,aAAa,CAACiF,UAAd,CAAyB,IAAzB,CAAjB,CAhCkB,CAkClB;;AACAnE,MAAAA,SAAS,GAAE,EAAX;AACAC,MAAAA,UAAU,GAAE,EAAZ;AACAb,MAAAA,UAAU,CAAC4B,KAAX,GAAmBhB,SAAnB;AACAZ,MAAAA,UAAU,CAAC8E,MAAX,GAAoBjE,UAApB;AACAZ,MAAAA,WAAW,GAAGD,UAAU,CAAC+E,UAAX,CAAsB,IAAtB,CAAd,CAvCkB,CAyClB;;AACA7E,MAAAA,YAAY,CAAC0B,KAAb,GAAqBhB,SAArB;AACAV,MAAAA,YAAY,CAAC4E,MAAb,GAAsBjE,UAAtB;AACAV,MAAAA,aAAa,GAAGD,YAAY,CAAC6E,UAAb,CAAwB,IAAxB,CAAhB,CA5CkB,CA8ClB;;AACA1D,MAAAA,IAAI,CAACO,KAAL,GAAahB,SAAb;AACAS,MAAAA,IAAI,CAACyD,MAAL,GAAcjE,UAAd;AACAO,MAAAA,WAAW,GAAGC,IAAI,CAAC0D,UAAL,CAAgB,IAAhB,CAAd;AAEAtE,MAAAA,mBAAmB,GAAE,GAArB;AAEAM,MAAAA,kBAAkB,GAAE,EAApB;AACAC,MAAAA,cAAc,GAAE,EAAhB;AACAC,MAAAA,gBAAgB,GAAE,KAAlB;AACAC,MAAAA,mBAAmB,GAAE,KAArB;;AAEAX,MAAAA,eAAe,GAAG,2BAAW,CAAE,CAA/B,CA1DkB,CA4DlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,WAAKyE,aAAL;AACD;;;AAyCD;AACA;AACA;oCAEgB;AACd,UAAIC,WAAW,GAAG;AAChBC,QAAAA,KAAK,EAAE,KADS;AAEhBrF,QAAAA,KAAK,EAAE;AACL+B,UAAAA,KAAK,EAAElB,YADF;AAELoE,UAAAA,MAAM,EAAEnE;AAFH;AAFS,OAAlB;AAQAwE,MAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCJ,WAApC,EACGK,IADH,CACQ,KAAKpD,WADb,EAEGqD,KAFH,CAES,KAAKnD,SAFd;AAGD;;;8BAUSoD,K,EAAO;AACf7C,MAAAA,OAAO,CAACC,GAAR,CAAY4C,KAAZ;AACAnD,MAAAA,KAAK,CAAC,uBAAD,CAAL;AACD;;;2BAoBM;AACLoD,MAAAA,aAAa,CAACjF,eAAD,CAAb;AACAX,MAAAA,KAAK,CAACgE,GAAN,GAAY,EAAZ;AACA1D,MAAAA,aAAa,CAACuF,SAAd,CAAwB,CAAxB,EAA2B,CAA3B,EAA8B9E,SAA9B,EAAyCC,UAAzC;AACAC,MAAAA,aAAa,GAAG,KAAhB;AACD;;;gCAsFWyD,a,EAAe;AACzB,UAAIoB,IAAI,GAAGpB,aAAa,CAACqB,IAAzB,CADyB,CAGzB;;AACA,UAAI3D,KAAK,GAAG,CAAZ;AACA,UAAI4D,YAAY,GAAG3E,mBAAmB,GAAG,EAAH,GAAQ4E,SAA9C;AACA,UAAIC,SAAS,GAAGD,SAAhB;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACM,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EAAyC;AACvC,YAAIE,SAAS,GAAGP,IAAI,CAACK,CAAD,CAAJ,GAAU,GAAV,GAAgBL,IAAI,CAACK,CAAC,GAAG,CAAL,CAAJ,GAAc,GAA9B,GAAoCL,IAAI,CAACK,CAAC,GAAG,CAAL,CAAJ,GAAc,GAAlE;AACA,YAAIG,UAAU,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAT,EAAcH,SAAS,IAAI,MAAMnF,kBAAV,CAAvB,CAAjB;AACA4E,QAAAA,IAAI,CAACK,CAAD,CAAJ,GAAU,CAAV;AACAL,QAAAA,IAAI,CAACK,CAAC,GAAG,CAAL,CAAJ,GAAcG,UAAd;AACAR,QAAAA,IAAI,CAACK,CAAC,GAAG,CAAL,CAAJ,GAAc,CAAd;;AAEA,YAAIE,SAAS,IAAInF,kBAAjB,EAAqC;AACnCkB,UAAAA,KAAK;AACLd,UAAAA,MAAM,GAAG,KAAKmF,oBAAL,CAA0BN,CAAC,GAAG,CAA9B,CAAT;;AAEA,cAAI/E,gBAAJ,EAAsB;AACpB8E,YAAAA,SAAS,GAAG,KAAKQ,kBAAL,CAAwBR,SAAxB,EAAmC5E,MAAM,CAACK,CAA1C,EAA6CL,MAAM,CAACM,CAApD,CAAZ;AACD;;AAED,cAAIP,mBAAJ,EAAyB;AACvB2E,YAAAA,YAAY,GAAG,KAAKW,qBAAL,CAA2BX,YAA3B,EAAyC1E,MAAM,CAACK,CAAhD,EAAmDL,MAAM,CAACM,CAA1D,EAA6DyE,SAA7D,CAAf;AACD;AAEF;AACF;;AAED,aAAO;AACLjE,QAAAA,KAAK,EAAEA,KADF;AAEL8D,QAAAA,SAAS,EAAE9D,KAAK,GAAGjB,cAAR,GAAyB+E,SAAzB,GAAqCD,SAF3C;AAGLD,QAAAA,YAAY,EAAEA;AAHT,OAAP;AAKD;;;yCAEoBY,U,EAAY;AAC/B,aAAO;AACLjF,QAAAA,CAAC,EAAEiF,UAAU,GAAG7F,SADX;AAELa,QAAAA,CAAC,EAAE2E,IAAI,CAACM,KAAL,CAAWD,UAAU,GAAG7F,SAAxB;AAFE,OAAP;AAID;;;uCAEkB+F,gB,EAAkBnF,C,EAAGC,C,EAAG;AACzC;AACA,UAAIsE,SAAS,GAAGY,gBAAgB,IAAI;AAClCnF,QAAAA,CAAC,EAAE;AACD6E,UAAAA,GAAG,EAAElF,MAAM,CAACK,CADX;AAEDoF,UAAAA,GAAG,EAAEpF;AAFJ,SAD+B;AAKlCC,QAAAA,CAAC,EAAE;AACD4E,UAAAA,GAAG,EAAElF,MAAM,CAACM,CADX;AAEDmF,UAAAA,GAAG,EAAEnF;AAFJ;AAL+B,OAApC;AAWAsE,MAAAA,SAAS,CAACvE,CAAV,CAAY6E,GAAZ,GAAkBD,IAAI,CAACC,GAAL,CAASN,SAAS,CAACvE,CAAV,CAAY6E,GAArB,EAA0B7E,CAA1B,CAAlB;AACAuE,MAAAA,SAAS,CAACvE,CAAV,CAAYoF,GAAZ,GAAkBR,IAAI,CAACQ,GAAL,CAASb,SAAS,CAACvE,CAAV,CAAYoF,GAArB,EAA0BpF,CAA1B,CAAlB;AACAuE,MAAAA,SAAS,CAACtE,CAAV,CAAY4E,GAAZ,GAAkBD,IAAI,CAACC,GAAL,CAASN,SAAS,CAACtE,CAAV,CAAY4E,GAArB,EAA0B5E,CAA1B,CAAlB;AACAsE,MAAAA,SAAS,CAACtE,CAAV,CAAYmF,GAAZ,GAAkBR,IAAI,CAACQ,GAAL,CAASb,SAAS,CAACtE,CAAV,CAAYmF,GAArB,EAA0BnF,CAA1B,CAAlB;AAEA,aAAOsE,SAAP;AACD;;;0CAEqBF,Y,EAAcrE,C,EAAGC,C,EAAGyE,S,EAAW;AACnDL,MAAAA,YAAY,CAACrE,CAAD,CAAZ,GAAkBqE,YAAY,CAACrE,CAAD,CAAZ,IAAmB,EAArC;AACAqE,MAAAA,YAAY,CAACrE,CAAD,CAAZ,CAAgBC,CAAhB,IAAqB,IAArB;AAEA,aAAOoE,YAAP;AACD;;;kCAEazB,gB,EAAkB;AAC9B;AACArE,MAAAA,cAAc,CAAC8G,YAAf,CAA4BzC,gBAA5B,EAA8C,CAA9C,EAAiD,CAAjD;AACA,aAAOtE,aAAa,CAACgH,SAAd,EAAP;AACD;;;qCAEgBjB,Y,EAAcrE,C,EAAGC,C,EAAG;AACnC,aAAOoE,YAAY,IAAIA,YAAY,CAACrE,CAAD,CAA5B,IAAmCqE,YAAY,CAACrE,CAAD,CAAZ,CAAgBC,CAAhB,CAA1C;AACD;;;4CAEuB;AACtB,aAAOV,kBAAP;AACD;;;0CAEqBgG,G,EAAK;AACzBhG,MAAAA,kBAAkB,GAAGgG,GAArB;AACD;;;wCAEmB;AAClB,aAAO/F,cAAP;AACD;;;sCAEiB+F,G,EAAK;AACrB/F,MAAAA,cAAc,GAAG+F,GAAjB;AACD;;;6BAEO;AACNpE,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,KAAKrB,KAAhC;AACA,UAAMyF,UAAU,GAAE;AAChBrF,QAAAA,GAAG,EAAE,CADW;AAEhBD,QAAAA,IAAI,EAAE,CAFU;AAGhB+B,QAAAA,QAAQ,EAAE,UAHM;AAIhBwD,QAAAA,MAAM,EAAE,CAJQ,CAKhB;;AALgB,OAAlB;AAQA,UAAMC,WAAW,GAAE;AACjBvF,QAAAA,GAAG,EAAE,KAAKJ,KAAL,CAAWI,GADC;AAEjBD,QAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWG,IAFA;AAGjB+B,QAAAA,QAAQ,EAAE,UAHO;AAIjBwD,QAAAA,MAAM,EAAE,CAAC,CAJQ,CAKjB;;AALiB,OAAnB;AAQA,UAAME,SAAS,GAAE;AACfxF,QAAAA,GAAG,EAAE,KAAKJ,KAAL,CAAWI,GADD;AAEfD,QAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWG,IAFF;AAGf+B,QAAAA,QAAQ,EAAE,UAHK;AAIfwD,QAAAA,MAAM,EAAE,CAJO;AAKfG,QAAAA,UAAU,EAAE,OALG;AAMfC,QAAAA,SAAS,EAAE,iBANI;AAOfC,QAAAA,eAAe,EAAC,iBAPD;AAQfC,QAAAA,YAAY,EAAC;AARE,OAAjB;AAWA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKlE,KAAL,CAAWmE,SAAX,GAAuB,KAAKC,IAAL,EAAvB,GAAqC,IADxC,EAEE;AAAO,QAAA,EAAE,EAAC,OAAV;AAAkB,QAAA,KAAK,EAAET,UAAzB;AAAqC,QAAA,KAAK,EAAE,KAAKzF,KAAL,CAAWK,KAAvD;AAA8D,QAAA,MAAM,EAAE,KAAKL,KAAL,CAAWuD,MAAjF;AAAyF,QAAA,GAAG,EAAC,OAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE;AAAQ,QAAA,EAAE,EAAC,QAAX;AAAoB,QAAA,KAAK,EAAEoC,WAA3B;AAAwC,QAAA,KAAK,EAAE,KAAK3F,KAAL,CAAWK,KAA1D;AAAiE,QAAA,MAAM,EAAE,KAAKL,KAAL,CAAWuD,MAApF;AAA4F,QAAA,GAAG,EAAC,QAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,EAIE;AAAQ,QAAA,EAAE,EAAC,MAAX;AAAkB,QAAA,KAAK,EAAEqC,SAAzB;AAAoC,QAAA,KAAK,EAAE,KAAK5F,KAAL,CAAWK,KAAtD;AAA6D,QAAA,MAAM,EAAE,KAAKL,KAAL,CAAWuD,MAAhF;AAAwF,QAAA,GAAG,EAAC,MAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE;AAAM,QAAA,EAAE,EAAC,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,EAME;AAAQ,QAAA,GAAG,EAAC,mDAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,CADF;AAUD;;;;EAlaiB1F,S;;AAqapB,SAASsI,eAAT,CAAyBnG,KAAzB,EAAgC;AAC9B,SAAO;AACL+B,IAAAA,aAAa,EAAE/B,KAAK,CAACiC,MAAN,CAAaF,aADvB;AAELkE,IAAAA,SAAS,EAAEjG,KAAK,CAACoG,KAAN,CAAYH;AAFlB,GAAP;AAID;;AAED,SAASI,kBAAT,CAA4BC,QAA5B,EAAqC;AACnC,SAAO,EAAP;AACD;;AAED,eAAexI,OAAO,CAACqI,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CtG,KAA7C,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n// import * as actions from '../redux/actions';\n// import { changeSprite } from '../actions/sprite'\n// import Konva from 'konva';\nimport { Stage, Layer } from 'react-konva';\nimport SpriteList from './SpriteList'\nimport ControlBar from './ControlBar'\nimport UploadSound from './UploadSound'\nimport { DiffCamEngine } from './diff-cam-engine'\n// import * from './adapter-1.0.7'\n\n  var stream;\t\t\t\t\t// stream obtained from webcam\n\tvar video;\t\t\t\t\t// shows stream\n\tvar captureCanvas;\t\t\t// internal canvas for capturing full images from video\n\tvar captureContext;\t\t\t// context for capture canvas\n\tvar diffCanvas;\t\t\t\t// internal canvas for diffing downscaled captures\n\tvar diffContext;\t\t\t// context for diff canvas\n\tvar motionCanvas;\t\t\t// receives processed diff images\n\tvar motionContext;\t\t\t// context for motion canvas\n\n\tvar initSuccessCallback;\t// called when init succeeds\n\tvar initErrorCallback;\t\t// called when init fails\n\tvar startCompleteCallback;\t// called when start is complete\n\tvar captureCallback;\t\t// called when an image has been captured and diffed\n\n\tvar captureInterval;\t\t// interval for continuous captures\n\tvar captureIntervalTime;\t// time between captures, in ms\n\tvar captureWidth;\t\t\t// full captured image width\n\tvar captureHeight;\t\t\t// full captured image height\n\tvar diffWidth;\t\t\t\t// downscaled width for diff/motion\n\tvar diffHeight;\t\t\t\t// downscaled height for diff/motion\n\tvar isReadyToDiff;\t\t\t// has a previous capture been made to diff against?\n\tvar pixelDiffThreshold;\t\t// min for a pixel to be considered significant\n\tvar scoreThreshold;\t\t\t// min for an image to be considered significant\n\tvar includeMotionBox;\t\t// flag to calculate and draw motion bounding box\n\tvar includeMotionPixels;\t// flag to create object denoting pixels with motion\n  var coords;\n  var testContext;\n  var test;\n\nclass Video extends Component {\n  state = {\n    x: 0,\n    y: 0,\n    // bottom: 0,\n    // height: 0,\n    left: 0,\n    // right: 0,\n    top: 0,\n    width: 0,\n    // captureInterval: null,\n    // video: document.getElementById('video'),\n    // motionCanvas : document.createElement('canvas'),\n    // captureIntervalTime: 100,\n    // captureWidth: 640,\n    // captureHeight: 480,\n    // diffWidth: 64,\n    // diffHeight: 48,\n    // pixelDiffThreshold: 32,\n    // scoreThreshold: 16,\n    // includeMotionBox: false,\n    // includeMotionPixels: false,\n  }\n\n  componentDidMount() {\n    let spriteCanvas = document.getElementsByClassName('konvajs-content')[0].getBoundingClientRect()\n    debugger\n\n    this.setState({\n      x: spriteCanvas.x,\n      y: spriteCanvas.y,\n      // bottom: spriteCanvas.bottom,\n      // height: spriteCanvas.height,\n      left: spriteCanvas.left,\n      // right: spriteCanvas.right,\n      top: spriteCanvas.top,\n      width: spriteCanvas.width,\n      // captureWidth: spriteCanvas.width,\n      // captureHeight: spriteCanvas.height,\n    })\n\n    motionCanvas = this.refs.motion\n    test = this.refs.test\n\n    // prep video\n\n    // non-configurable\n    captureCanvas = document.createElement('canvas');\n    diffCanvas = document.createElement('canvas');\n    isReadyToDiff = false;\n\n    // prep capture canvas\n    captureWidth= spriteCanvas.width;\n    captureHeight= spriteCanvas.height;\n    captureCanvas.width = captureWidth;\n    captureCanvas.height = captureHeight;\n    captureContext = captureCanvas.getContext('2d');\n\n    // prep diff canvas\n    diffWidth= 64;\n    diffHeight= 48;\n    diffCanvas.width = diffWidth;\n    diffCanvas.height = diffHeight;\n    diffContext = diffCanvas.getContext('2d');\n\n    // prep motion canvas\n    motionCanvas.width = diffWidth;\n    motionCanvas.height = diffHeight;\n    motionContext = motionCanvas.getContext('2d');\n\n    //test canvas\n    test.width = diffWidth;\n    test.height = diffHeight;\n    testContext = test.getContext('2d')\n\n    captureIntervalTime= 100;\n\n    pixelDiffThreshold= 32;\n    scoreThreshold= 16;\n    includeMotionBox= false;\n    includeMotionPixels= false;\n\n    captureCallback = function() {};\n\n    // const drawSprites = () => {\n    //   return this.props.canvasSprites.map(sprite => {\n    //     const image = new window.Image();\n    //     image.src = sprite.sprite.url\n    //     image.onload = () => {\n    //       testContext.save()\n    //       testContext.scale(-1,1)\n    //       testContext.drawImage(image, sprite.position.x-test.width+60, sprite.position.y, -60, 60)\n    //       testContext.restore()\n    //       // testContext.scale(-1,1)\n    //       // testContext.drawImage(image, spriteCanvas.width-(60+sprite.position.x), sprite.position.y, 60, 60)\n    //     }\n    //   })\n    // }\n\n    // this.drawSprites()\n    this.requestWebcam();\n  }\n\n  getMotion = () => {\n    var canvas = document.getElementById('motion');\n    var video = document.getElementById('video');\n    // var video = document.createElement('video')\n    var score = document.getElementById('score');\n    var test = document.getElementById('test')\n    // var canvas = this.refs.motion;\n    // var video = this.refs.video\n    // var score = document.getElementById('score');\n    // var test = this.refs.test\n\n    // let captureInterval = setInterval(DiffCamEngine.capture, 100);\n    // console.log('captureinterval',captureInterval)\n    // this.setState({\n    //   captureInterval: captureInterval\n    // })\n\n    function initSuccess() {\n      DiffCamEngine.start();\n    }\n\n    function initError() {\n      alert('Something went wrong.');\n    }\n\n    function capture(payload) {\n      score.textContent = payload.score;\n    }\n\n    DiffCamEngine.init({\n      video: video,\n      test: test,\n      motionCanvas: canvas,\n      initSuccessCallback: initSuccess,\n      initErrorCallback: initError,\n      captureCallback: capture\n    });\n    // this.requestWebcam();\n  }\n  // captureCallback(payload) {\n  //   score.textContent = payload.score;\n  // }\n\n  requestWebcam() {\n    var constraints = {\n      audio: false,\n      video: {\n        width: captureWidth,\n        height: captureHeight\n      }\n    };\n\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then(this.initSuccess)\n      .catch(this.initError);\n  }\n\n  initSuccess = (requestedStream) => {\n    console.log(requestedStream)\n    stream = requestedStream\n    // console.log(initSuccessCallback)\n    // initSuccessCallback();\n    this.start();\n  }\n\n  initError(error) {\n    console.log(error);\n    alert('Something went wrong.');\n  }\n\n  start = () => {\n    // video = document.getElementById('video');\n    video = document.createElement('video')\n    video.autoplay = true\n    if (!stream) {\n      throw 'Cannot start after init fail';\n    }\n\n    // streaming takes a moment to start\n    video.addEventListener('canplay', this.startComplete);\n    video.srcObject = stream;\n  }\n\n  startComplete = () => {\n    video.removeEventListener('canplay', this.startComplete);\n    captureInterval = setInterval(this.capture, captureIntervalTime);\n  }\n\n  stop() {\n    clearInterval(captureInterval);\n    video.src = '';\n    motionContext.clearRect(0, 0, diffWidth, diffHeight);\n    isReadyToDiff = false;\n  }\n\n  drawSprites = () => {\n    if(this.props.canvasSprites){\n      this.props.canvasSprites.map(sprite => {\n        console.log('SPRITE POSITION', sprite.position)\n        const image = new window.Image();\n        image.src = sprite.sprite.url\n        image.onload = () => {\n          testContext.save()\n          testContext.scale(-1,1)\n          testContext.drawImage(image, sprite.position.x-test.width+60, sprite.position.y, -60, 60)\n          testContext.restore()\n        }\n      })\n    }\n    // this.props.canvasSprites.map(sprite => {\n    //   const image = new window.Image();\n    //   image.src = sprite.sprite.url\n    //   image.onload = () => {\n    //     testContext.save()\n    //     testContext.scale(-1,1)\n    //     testContext.drawImage(image, sprite.position.x-test.width+60, sprite.position.y, -60, 60)\n    //     testContext.restore()\n    //   }\n    // })\n  }\n\n  capture = () => {\n    // save a full-sized copy of capture\n    captureContext.drawImage(video, 0, 0, captureWidth, captureHeight);\n    var captureImageData = captureContext.getImageData(0, 0, captureWidth, captureHeight);\n    testContext.drawImage(video, 0, 0, captureWidth, captureHeight);\n    // const drawSprites = () => {\n    //   return this.props.canvasSprites.map(sprite => {\n    //     const image = new window.Image();\n    //     image.src = sprite.sprite.url\n    //     image.onload = () => {\n    //       testContext.save()\n    //       testContext.scale(-1,1)\n    //       testContext.drawImage(image, sprite.position.x-test.width+60, sprite.position.y, -60, 60)\n    //       testContext.restore()\n    //     }\n    //   })\n    // }\n    this.drawSprites()\n    // diff current capture over previous capture, leftover from last time\n    diffContext.globalCompositeOperation = 'difference';\n    diffContext.drawImage(video, 0, 0, diffWidth, diffHeight);\n    var diffImageData = diffContext.getImageData(0, 0, diffWidth, diffHeight);\n    console.log('diffImageData',diffImageData)\n    //\n    // if (isReadyToDiff) {\n    //   var diff = this.processDiff(diffImageData);\n    //\n    //   motionContext.putImageData(diffImageData, 0, 0);\n    //   if (diff.motionBox) {\n    //     motionContext.strokeStyle = '#fff';\n    //     motionContext.strokeRect(\n    //       diff.motionBox.x.min + 0.5,\n    //       diff.motionBox.y.min + 0.5,\n    //       diff.motionBox.x.max - diff.motionBox.x.min,\n    //       diff.motionBox.y.max - diff.motionBox.y.min\n    //     );\n    //   }\n    //   captureCallback({\n    //     imageData: captureImageData,\n    //     score: diff.score,\n    //     hasMotion: diff.score >= scoreThreshold,\n    //     motionBox: diff.motionBox,\n    //     motionPixels: diff.motionPixels,\n    //     getURL: function() {\n    //       return this.getCaptureUrl(this.imageData);\n    //     },\n    //     checkMotionPixel: function(x, y) {\n    //       return this.checkMotionPixel(this.motionPixels, x, y)\n    //     }\n    //   });\n    // }\n    //\n    // // draw current capture normally over diff, ready for next time\n    // diffContext.globalCompositeOperation = 'source-over';\n    // diffContext.drawImage(video, 0, 0, diffWidth, diffHeight);\n    // isReadyToDiff = true;\n  }\n\n  processDiff(diffImageData) {\n    var rgba = diffImageData.data;\n\n    // pixel adjustments are done by reference directly on diffImageData\n    var score = 0;\n    var motionPixels = includeMotionPixels ? [] : undefined;\n    var motionBox = undefined;\n    for (var i = 0; i < rgba.length; i += 4) {\n      var pixelDiff = rgba[i] * 0.3 + rgba[i + 1] * 0.6 + rgba[i + 2] * 0.1;\n      var normalized = Math.min(255, pixelDiff * (255 / pixelDiffThreshold));\n      rgba[i] = 0;\n      rgba[i + 1] = normalized;\n      rgba[i + 2] = 0;\n\n      if (pixelDiff >= pixelDiffThreshold) {\n        score++;\n        coords = this.calculateCoordinates(i / 4);\n\n        if (includeMotionBox) {\n          motionBox = this.calculateMotionBox(motionBox, coords.x, coords.y);\n        }\n\n        if (includeMotionPixels) {\n          motionPixels = this.calculateMotionPixels(motionPixels, coords.x, coords.y, pixelDiff);\n        }\n\n      }\n    }\n\n    return {\n      score: score,\n      motionBox: score > scoreThreshold ? motionBox : undefined,\n      motionPixels: motionPixels\n    };\n  }\n\n  calculateCoordinates(pixelIndex) {\n    return {\n      x: pixelIndex % diffWidth,\n      y: Math.floor(pixelIndex / diffWidth)\n    };\n  }\n\n  calculateMotionBox(currentMotionBox, x, y) {\n    // init motion box on demand\n    var motionBox = currentMotionBox || {\n      x: {\n        min: coords.x,\n        max: x\n      },\n      y: {\n        min: coords.y,\n        max: y\n      }\n    };\n\n    motionBox.x.min = Math.min(motionBox.x.min, x);\n    motionBox.x.max = Math.max(motionBox.x.max, x);\n    motionBox.y.min = Math.min(motionBox.y.min, y);\n    motionBox.y.max = Math.max(motionBox.y.max, y);\n\n    return motionBox;\n  }\n\n  calculateMotionPixels(motionPixels, x, y, pixelDiff) {\n    motionPixels[x] = motionPixels[x] || [];\n    motionPixels[x][y] = true;\n\n    return motionPixels;\n  }\n\n  getCaptureUrl(captureImageData) {\n    // may as well borrow captureCanvas\n    captureContext.putImageData(captureImageData, 0, 0);\n    return captureCanvas.toDataURL();\n  }\n\n  checkMotionPixel(motionPixels, x, y) {\n    return motionPixels && motionPixels[x] && motionPixels[x][y];\n  }\n\n  getPixelDiffThreshold() {\n    return pixelDiffThreshold;\n  }\n\n  setPixelDiffThreshold(val) {\n    pixelDiffThreshold = val;\n  }\n\n  getScoreThreshold() {\n    return scoreThreshold;\n  }\n\n  setScoreThreshold(val) {\n    scoreThreshold = val;\n  }\n\n  render(){\n    console.log('VIDEO STATE', this.state)\n    const videoStyle= {\n      top: 0,\n      left: 0,\n      position: 'absolute',\n      zIndex: 4,\n      // background: 'gray',\n    }\n\n    const motionStyle= {\n      top: this.state.top,\n      left: this.state.left,\n      position: 'absolute',\n      zIndex: -1,\n      // background: 'gray',\n    }\n\n    const testStyle= {\n      top: this.state.top,\n      left: this.state.left,\n      position: 'absolute',\n      zIndex: 4,\n      background: 'black',\n      transform: 'rotateY(180deg)',\n      WebkitTransform:'rotateY(180deg)',\n      MozTransform:'rotateY(180deg)',\n    }\n\n    return(\n      <div>\n        {this.props.stopVideo ? this.stop() : null}\n        <video id=\"video\" style={videoStyle} width={this.state.width} height={this.state.height} ref='video'></video>\n        <canvas id='motion' style={motionStyle} width={this.state.width} height={this.state.height} ref='motion'/>\n        <canvas id='test' style={testStyle} width={this.state.width} height={this.state.height} ref='test'/>\n        <span id=\"score\"></span>\n        <script src=\"https://webrtc.github.io/adapter/adapter-1.0.7.js\"></script>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    canvasSprites: state.sprite.canvasSprites,\n    stopVideo: state.sound.stopVideo\n  }\n}\n\nfunction mapDispatchToProps(dispatch){\n  return {}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Video);\n"]},"metadata":{},"sourceType":"module"}