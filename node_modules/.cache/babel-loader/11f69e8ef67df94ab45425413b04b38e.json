{"ast":null,"code":"import _objectSpread from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/SpriteBar.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'; // import Konva from 'konva';\n\nimport { Stage, Layer, Image, Text } from 'react-konva'; // import { addSprite } from '../actions/sprite'\n\nimport * as actions from '../actions/sprite';\nimport UUID from 'uuid';\n\nvar SpriteBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SpriteBar, _Component);\n\n  function SpriteBar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SpriteBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SpriteBar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedSpriteBar: null\n    };\n\n    _this.selectSprite = function (sprite) {\n      _this.setState({\n        selectedSpriteBar: sprite\n      });\n    };\n\n    _this.sprites = function () {\n      var imgStyle = {\n        width: '100px',\n        height: '100px'\n      };\n      return _this.props.sprites.map(function (sprite) {\n        return React.createElement(\"img\", {\n          key: sprite.id,\n          style: imgStyle,\n          src: sprite.url,\n          onClick: function onClick() {\n            return _this.selectSprite(sprite);\n          },\n          alt: sprite.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        });\n      });\n    };\n\n    _this.addSpriteMethod = function () {\n      var uniqueKey = UUID();\n\n      if (!!_this.state.selectedSpriteBar) {\n        _this.props.addSprite(_objectSpread({}, _this.state.selectedSprite, {\n          uniqueKey: uniqueKey\n        }));\n\n        _this.setState({\n          selectedSpriteBar: null\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(SpriteBar, [{\n    key: \"render\",\n    value: function render() {\n      var spriteBarStyle = {\n        position: 'absolute',\n        // width: '150px',\n        // height: '100vh',\n        left: '0',\n        top: '10',\n        backgroundColor: '#EEEEEE',\n        borderRight: '1px dotted' // return(\n        //   <div style={divStyle} onDragOver={(e)=>this.onDragOver(e)}\n        //     onDrop={(e)=>{this.onDrop(e, \"wip\")}}>\n        //     <h1>Sprite Bar</h1>\n        //     {this.sprites()}\n        //     <button onClick={this.props.addSprite}>Add Sprite</button>\n        //   </div>\n        // )\n\n      };\n      return (// <div style={divStyle}>\n        //   <h1>Sprite Bar</h1>\n        //   {this.sprites()}\n        //   <button onClick={this.addSpriteMethod}>Add Sprite</button>\n        // </div>\n        React.createElement(Stage, {\n          style: spriteBarStyle,\n          width: 150,\n          height: 720,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, React.createElement(Layer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, React.createElement(Text, {\n          text: \"Control Bar\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        })))\n      );\n    }\n  }]);\n\n  return SpriteBar;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    sprites: state.sprite.sprites\n  };\n} // function mapDispatchToProps(dispatch){\n//   return {\n//     addSprite: (selectedSprite) => {\n//       dispatch(addSprite(selectedSprite))\n//     }\n//   }\n// }\n\n\nexport default connect(mapStateToProps, actions)(SpriteBar);","map":{"version":3,"sources":["/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/SpriteBar.js"],"names":["React","Component","connect","Stage","Layer","Image","Text","actions","UUID","SpriteBar","state","selectedSpriteBar","selectSprite","sprite","setState","sprites","imgStyle","width","height","props","map","id","url","name","addSpriteMethod","uniqueKey","addSprite","selectedSprite","spriteBarStyle","position","left","top","backgroundColor","borderRight","mapStateToProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,KAAvB,EAA8BC,IAA9B,QAA0C,aAA1C,C,CACA;;AACA,OAAO,KAAKC,OAAZ,MAAyB,mBAAzB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;IAEMC,S;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,iBAAiB,EAAE;AADb,K;;UAIRC,Y,GAAe,UAACC,MAAD,EAAY;AACzB,YAAKC,QAAL,CAAc;AACZH,QAAAA,iBAAiB,EAAEE;AADP,OAAd;AAGD,K;;UAEDE,O,GAAU,YAAM;AACd,UAAMC,QAAQ,GAAC;AAACC,QAAAA,KAAK,EAAC,OAAP;AAAgBC,QAAAA,MAAM,EAAC;AAAvB,OAAf;AACA,aAAO,MAAKC,KAAL,CAAWJ,OAAX,CAAmBK,GAAnB,CAAuB,UAAAP,MAAM,EAAI;AACtC,eAAO;AAAK,UAAA,GAAG,EAAEA,MAAM,CAACQ,EAAjB;AAAqB,UAAA,KAAK,EAAEL,QAA5B;AAAsC,UAAA,GAAG,EAAEH,MAAM,CAACS,GAAlD;AAAuD,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAKV,YAAL,CAAkBC,MAAlB,CAAN;AAAA,WAAhE;AAAiG,UAAA,GAAG,EAAEA,MAAM,CAACU,IAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACC,OAFI,CAAP;AAGC,K;;UAEHC,e,GAAkB,YAAM;AACtB,UAAMC,SAAS,GAAGjB,IAAI,EAAtB;;AACA,UAAG,CAAC,CAAC,MAAKE,KAAL,CAAWC,iBAAhB,EAAkC;AAChC,cAAKQ,KAAL,CAAWO,SAAX,mBAAyB,MAAKhB,KAAL,CAAWiB,cAApC;AAAmDF,UAAAA,SAAS,EAACA;AAA7D;;AACA,cAAKX,QAAL,CAAc;AAACH,UAAAA,iBAAiB,EAAE;AAApB,SAAd;AACD;AACF,K;;;;;;;6BAEO;AACN,UAAMiB,cAAc,GAAG;AACrBC,QAAAA,QAAQ,EAAE,UADW;AAErB;AACA;AACAC,QAAAA,IAAI,EAAE,GAJe;AAKrBC,QAAAA,GAAG,EAAE,IALgB;AAMrBC,QAAAA,eAAe,EAAE,SANI;AAOrBC,QAAAA,WAAW,EAAE,YAPQ,CASvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAhBuB,OAAvB;AAiBA,aACE;AACA;AACA;AACA;AACA;AACA,4BAAC,KAAD;AAAO,UAAA,KAAK,EAAEL,cAAd;AAA8B,UAAA,KAAK,EAAE,GAArC;AAA0C,UAAA,MAAM,EAAE,GAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD;AAAM,UAAA,IAAI,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AANF;AAYD;;;;EAxDqB3B,S;;AA2DxB,SAASiC,eAAT,CAAyBxB,KAAzB,EAAgC;AAC9B,SAAO;AACLK,IAAAA,OAAO,EAAEL,KAAK,CAACG,MAAN,CAAaE;AADjB,GAAP;AAGD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeb,OAAO,CAACgC,eAAD,EAAkB3B,OAAlB,CAAP,CAAkCE,SAAlC,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n// import Konva from 'konva';\nimport { Stage, Layer, Image, Text } from 'react-konva';\n// import { addSprite } from '../actions/sprite'\nimport * as actions from '../actions/sprite'\nimport UUID from 'uuid'\n\nclass SpriteBar extends Component{\n  state = {\n    selectedSpriteBar: null\n  }\n\n  selectSprite = (sprite) => {\n    this.setState({\n      selectedSpriteBar: sprite\n    })\n  }\n\n  sprites = () => {\n    const imgStyle={width:'100px', height:'100px'}\n    return this.props.sprites.map(sprite => {\n      return <img key={sprite.id} style={imgStyle} src={sprite.url} onClick={() => this.selectSprite(sprite)} alt={sprite.name} />\n      })\n    }\n\n  addSpriteMethod = () => {\n    const uniqueKey = UUID()\n    if(!!this.state.selectedSpriteBar){\n      this.props.addSprite({...this.state.selectedSprite,uniqueKey:uniqueKey})\n      this.setState({selectedSpriteBar: null})\n    }\n  }\n\n  render(){\n    const spriteBarStyle = {\n      position: 'absolute',\n      // width: '150px',\n      // height: '100vh',\n      left: '0',\n      top: '10',\n      backgroundColor: '#EEEEEE',\n      borderRight: '1px dotted'}\n\n    // return(\n    //   <div style={divStyle} onDragOver={(e)=>this.onDragOver(e)}\n    //     onDrop={(e)=>{this.onDrop(e, \"wip\")}}>\n    //     <h1>Sprite Bar</h1>\n    //     {this.sprites()}\n    //     <button onClick={this.props.addSprite}>Add Sprite</button>\n    //   </div>\n    // )\n    return(\n      // <div style={divStyle}>\n      //   <h1>Sprite Bar</h1>\n      //   {this.sprites()}\n      //   <button onClick={this.addSpriteMethod}>Add Sprite</button>\n      // </div>\n      <Stage style={spriteBarStyle} width={150} height={720}>\n        <Layer>\n          <Text text='Control Bar'/>\n        </Layer>\n      </Stage>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sprites: state.sprite.sprites\n  }\n}\n\n// function mapDispatchToProps(dispatch){\n//   return {\n//     addSprite: (selectedSprite) => {\n//       dispatch(addSprite(selectedSprite))\n//     }\n//   }\n// }\n\nexport default connect(mapStateToProps, actions)(SpriteBar);\n"]},"metadata":{},"sourceType":"module"}