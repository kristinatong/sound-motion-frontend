{"ast":null,"code":"import _classCallCheck from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/Video.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'; // import * as actions from '../redux/actions';\n// import { changeSprite } from '../actions/sprite'\n// import Konva from 'konva';\n\nimport { Stage, Layer } from 'react-konva';\nimport SpriteList from './SpriteList';\nimport ControlBar from './ControlBar';\nimport UploadSound from './UploadSound';\nimport { DiffCamEngine } from './diff-cam-engine'; // import * from './adapter-1.0.7'\n\nvar stream; // stream obtained from webcam\n\nvar video; // shows stream\n\nvar captureCanvas; // internal canvas for capturing full images from video\n\nvar captureContext; // context for capture canvas\n\nvar diffCanvas; // internal canvas for diffing downscaled captures\n\nvar diffContext; // context for diff canvas\n\nvar motionCanvas; // receives processed diff images\n\nvar motionContext; // context for motion canvas\n\nvar initSuccessCallback; // called when init succeeds\n\nvar initErrorCallback; // called when init fails\n\nvar startCompleteCallback; // called when start is complete\n\nvar captureCallback; // called when an image has been captured and diffed\n\nvar captureInterval; // interval for continuous captures\n\nvar captureIntervalTime; // time between captures, in ms\n\nvar captureWidth; // full captured image width\n\nvar captureHeight; // full captured image height\n\nvar diffWidth; // downscaled width for diff/motion\n\nvar diffHeight; // downscaled height for diff/motion\n\nvar isReadyToDiff; // has a previous capture been made to diff against?\n\nvar pixelDiffThreshold; // min for a pixel to be considered significant\n\nvar scoreThreshold; // min for an image to be considered significant\n\nvar includeMotionBox; // flag to calculate and draw motion bounding box\n\nvar includeMotionPixels; // flag to create object denoting pixels with motion\n\nvar coords;\nvar testContext;\nvar test;\nvar spritePositionX;\nvar spritePositionY;\nvar count = 0;\n\nvar Video =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Video, _Component);\n\n  function Video() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Video);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Video)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      x: 0,\n      y: 0,\n      // bottom: 0,\n      height: 0,\n      left: 0,\n      // right: 0,\n      top: 0,\n      width: 0,\n      stream: null // captureInterval: null,\n      // video: document.getElementById('video'),\n      // motionCanvas : document.createElement('canvas'),\n      // captureIntervalTime: 100,\n      // captureWidth: 640,\n      // captureHeight: 480,\n      // diffWidth: 64,\n      // diffHeight: 48,\n      // pixelDiffThreshold: 32,\n      // scoreThreshold: 16,\n      // includeMotionBox: false,\n      // includeMotionPixels: false,\n\n    };\n\n    _this.initSuccess = function (requestedStream) {\n      console.log(requestedStream);\n      stream = requestedStream;\n\n      _this.setState({\n        stream: stream\n      }); // console.log(initSuccessCallback)\n      // initSuccessCallback();\n\n\n      _this.start();\n    };\n\n    _this.start = function () {\n      // video = document.getElementById('video');\n      video = document.createElement('video');\n      video.autoplay = true;\n\n      if (!stream) {\n        throw 'Cannot start after init fail';\n      } // streaming takes a moment to start\n\n\n      video.addEventListener('canplay', _this.startComplete);\n      video.srcObject = stream;\n    };\n\n    _this.startComplete = function () {\n      video.removeEventListener('canplay', _this.startComplete);\n      captureInterval = setInterval(_this.capture, captureIntervalTime);\n    };\n\n    _this.stop = function () {\n      clearInterval(captureInterval); // video.src = '';\n      // motionContext.clearRect(0, 0, diffWidth, diffHeight);\n\n      testContext.clearRect(0, 0, diffWidth, diffHeight);\n      isReadyToDiff = false;\n\n      _this.state.stream.getVideoTracks()[0].stop();\n    };\n\n    _this.drawSprites = function () {\n      if (_this.props.canvasSprites) {\n        _this.props.canvasSprites.map(function (sprite) {\n          var image = new window.Image();\n          image.src = sprite.sprite.url;\n\n          image.onload = function () {\n            testContext.save();\n            testContext.scale(-1, 1);\n            testContext.drawImage(image, sprite.position.x - test.width + 60, sprite.position.y, -60, 60); // testContext.drawImage(image,sprite.position.x,sprite.position.y,60,60)\n\n            testContext.restore();\n          };\n        });\n      }\n    };\n\n    _this.capture = function () {\n      // save a full-sized copy of capture\n      captureContext.drawImage(video, 0, 0, captureWidth, captureHeight);\n      var captureImageData = captureContext.getImageData(0, 0, captureWidth, captureHeight);\n      testContext.drawImage(video, 0, 0, captureWidth, captureHeight);\n\n      _this.drawSprites(); // diff current capture over previous capture, leftover from last time\n\n\n      diffContext.globalCompositeOperation = 'difference';\n      diffContext.drawImage(video, 0, 0, diffWidth, diffHeight);\n      var diffImageData = diffContext.getImageData(0, 0, diffWidth, diffHeight); // console.log('diffImageData',diffImageData)\n\n      if (isReadyToDiff) {\n        var diff = _this.processDiff(diffImageData);\n\n        motionContext.putImageData(diffImageData, 0, 0);\n\n        if (diff.motionBox) {\n          motionContext.strokeStyle = '#fff';\n          motionContext.strokeRect(diff.motionBox.x.min + 0.5, diff.motionBox.y.min + 0.5, diff.motionBox.x.max - diff.motionBox.x.min, diff.motionBox.y.max - diff.motionBox.y.min);\n        }\n\n        captureCallback({\n          imageData: captureImageData,\n          score: diff.score,\n          hasMotion: diff.score >= scoreThreshold,\n          motionBox: diff.motionBox,\n          motionPixels: diff.motionPixels,\n          getURL: function getURL() {\n            return this.getCaptureUrl(this.imageData);\n          },\n          checkMotionPixel: function checkMotionPixel(x, y) {\n            return this.checkMotionPixel(this.motionPixels, x, y);\n          }\n        });\n      } // draw current capture normally over diff, ready for next time\n\n\n      diffContext.globalCompositeOperation = 'source-over';\n      diffContext.drawImage(video, 0, 0, diffWidth, diffHeight);\n      isReadyToDiff = true;\n    };\n\n    return _this;\n  }\n\n  _createClass(Video, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var spriteCanvas = document.getElementsByClassName('konvajs-content')[0].getBoundingClientRect();\n      this.setState({\n        x: spriteCanvas.x,\n        y: spriteCanvas.y,\n        // bottom: spriteCanvas.bottom,\n        height: spriteCanvas.height,\n        left: spriteCanvas.left,\n        // right: spriteCanvas.right,\n        top: spriteCanvas.top,\n        width: spriteCanvas.width // captureWidth: spriteCanvas.width,\n        // captureHeight: spriteCanvas.height,\n\n      });\n      motionCanvas = this.refs.motion;\n      test = this.refs.test; // prep video\n      // non-configurable\n\n      captureCanvas = document.createElement('canvas');\n      diffCanvas = document.createElement('canvas');\n      isReadyToDiff = false; // prep capture canvas\n\n      captureWidth = spriteCanvas.width;\n      captureHeight = spriteCanvas.height;\n      captureCanvas.width = captureWidth;\n      captureCanvas.height = captureHeight;\n      captureContext = captureCanvas.getContext('2d'); // prep diff canvas\n\n      diffWidth = 64;\n      diffHeight = 48;\n      diffCanvas.width = diffWidth;\n      diffCanvas.height = diffHeight;\n      diffContext = diffCanvas.getContext('2d'); // prep motion canvas\n\n      motionCanvas.width = diffWidth;\n      motionCanvas.height = diffHeight;\n      motionContext = motionCanvas.getContext('2d'); //test canvas\n\n      test.width = diffWidth;\n      test.height = diffHeight;\n      testContext = test.getContext('2d');\n      captureIntervalTime = 100;\n      pixelDiffThreshold = 32;\n      scoreThreshold = 16;\n      includeMotionBox = false;\n      includeMotionPixels = false;\n\n      captureCallback = function captureCallback() {};\n\n      this.requestWebcam();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.stop();\n    }\n  }, {\n    key: \"requestWebcam\",\n    value: function requestWebcam() {\n      var constraints = {\n        audio: false,\n        video: {\n          width: captureWidth,\n          height: captureHeight\n        }\n      };\n      navigator.mediaDevices.getUserMedia(constraints).then(this.initSuccess).catch(this.initError);\n    }\n  }, {\n    key: \"initError\",\n    value: function initError(error) {\n      console.log(error);\n      alert('Something went wrong.');\n    }\n  }, {\n    key: \"processDiff\",\n    value: function processDiff(diffImageData) {\n      var rgba = diffImageData.data; // pixel adjustments are done by reference directly on diffImageData\n\n      var score = 0;\n      var motionPixels = includeMotionPixels ? [] : undefined;\n      var motionBox = undefined;\n\n      for (var i = 0; i < rgba.length; i += 4) {\n        var pixelDiff = rgba[i] * 0.3 + rgba[i + 1] * 0.6 + rgba[i + 2] * 0.1;\n        var normalized = Math.min(255, pixelDiff * (255 / pixelDiffThreshold));\n        rgba[i] = 0;\n        rgba[i + 1] = normalized;\n        rgba[i + 2] = 0;\n\n        if (pixelDiff >= pixelDiffThreshold) {\n          score++;\n          coords = this.calculateCoordinates(i / 4);\n          console.log('coords', coords, 'pixelDiff', pixelDiff, 'i', i);\n          this.props.canvasSprites.map(function (sprite) {\n            if (sprite.position.x === 0) {\n              // spritePositionX = 0\n              spritePositionX = 54; //mirrored canvas\n            } else {\n              spritePositionX = sprite.position.x * diffWidth / 600;\n            }\n\n            if (sprite.position.y === 0) {\n              spritePositionY = 0; // spritePositionY = 42  //mirrored canvas\n            } else {\n              spritePositionY = sprite.position.y * diffHeight / 450;\n            }\n\n            console.log('spritePositionX', spritePositionX, 'sprite.position.x', sprite.position.x);\n            console.log('spritePositionY', spritePositionY, 'sprite.position.y', sprite.position.y);\n\n            if (coords.x >= spritePositionX && coords.x <= spritePositionX + 10) {\n              if (coords.y >= spritePositionY && coords.y <= spritePositionY + 6) {\n                console.log('%c TOUCHED IT ', 'color: red');\n                count += 1;\n\n                if (count > 5) {\n                  if (document.getElementById(sprite.uniqueKey)) {\n                    var player = document.getElementById(sprite.uniqueKey);\n                    player.paused ? player.play() : player.pause();\n                  }\n\n                  count = 0;\n                }\n              }\n            }\n          }); // if (includeMotionBox) {\n          //   motionBox = this.calculateMotionBox(motionBox, coords.x, coords.y);\n          // }\n          //\n          // if (includeMotionPixels) {\n          //   motionPixels = this.calculateMotionPixels(motionPixels, coords.x, coords.y, pixelDiff);\n          // }\n        }\n      }\n\n      return {\n        score: score,\n        motionBox: score > scoreThreshold ? motionBox : undefined,\n        motionPixels: motionPixels\n      };\n    }\n  }, {\n    key: \"calculateCoordinates\",\n    value: function calculateCoordinates(pixelIndex) {\n      return {\n        x: pixelIndex % diffWidth,\n        // y: Math.floor(pixelIndex / diffWidth)\n        y: Math.floor(pixelIndex / diffWidth)\n      };\n    }\n  }, {\n    key: \"calculateMotionBox\",\n    value: function calculateMotionBox(currentMotionBox, x, y) {\n      // init motion box on demand\n      var motionBox = currentMotionBox || {\n        x: {\n          min: coords.x,\n          max: x\n        },\n        y: {\n          min: coords.y,\n          max: y\n        }\n      };\n      motionBox.x.min = Math.min(motionBox.x.min, x);\n      motionBox.x.max = Math.max(motionBox.x.max, x);\n      motionBox.y.min = Math.min(motionBox.y.min, y);\n      motionBox.y.max = Math.max(motionBox.y.max, y);\n      return motionBox;\n    }\n  }, {\n    key: \"calculateMotionPixels\",\n    value: function calculateMotionPixels(motionPixels, x, y, pixelDiff) {\n      motionPixels[x] = motionPixels[x] || [];\n      motionPixels[x][y] = true;\n      return motionPixels;\n    }\n  }, {\n    key: \"getCaptureUrl\",\n    value: function getCaptureUrl(captureImageData) {\n      // may as well borrow captureCanvas\n      captureContext.putImageData(captureImageData, 0, 0);\n      return captureCanvas.toDataURL();\n    }\n  }, {\n    key: \"checkMotionPixel\",\n    value: function checkMotionPixel(motionPixels, x, y) {\n      return motionPixels && motionPixels[x] && motionPixels[x][y];\n    }\n  }, {\n    key: \"getPixelDiffThreshold\",\n    value: function getPixelDiffThreshold() {\n      return pixelDiffThreshold;\n    }\n  }, {\n    key: \"setPixelDiffThreshold\",\n    value: function setPixelDiffThreshold(val) {\n      pixelDiffThreshold = val;\n    }\n  }, {\n    key: \"getScoreThreshold\",\n    value: function getScoreThreshold() {\n      return scoreThreshold;\n    }\n  }, {\n    key: \"setScoreThreshold\",\n    value: function setScoreThreshold(val) {\n      scoreThreshold = val;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log('VIDEO PROPS', this.props);\n      console.log('VIDEO STATE', this.state);\n      var videoStyle = {\n        top: 0,\n        left: 0,\n        position: 'absolute',\n        zIndex: 4 // background: 'gray',\n\n      };\n      var motionStyle = {\n        top: this.state.top,\n        left: this.state.left,\n        position: 'absolute',\n        zIndex: -1 // background: 'gray',\n\n      };\n      var testStyle = {\n        top: this.state.top,\n        left: this.state.left,\n        position: 'absolute',\n        zIndex: 4,\n        background: 'black',\n        transform: 'rotateY(180deg)',\n        WebkitTransform: 'rotateY(180deg)',\n        MozTransform: 'rotateY(180deg)'\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        id: \"video\",\n        style: videoStyle,\n        width: this.state.width,\n        height: this.state.height,\n        ref: \"video\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421\n        },\n        __self: this\n      }), React.createElement(\"canvas\", {\n        id: \"motion\",\n        style: motionStyle,\n        width: this.state.width,\n        height: this.state.height,\n        ref: \"motion\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422\n        },\n        __self: this\n      }), React.createElement(\"canvas\", {\n        id: \"test\",\n        style: testStyle,\n        width: this.state.width,\n        height: this.state.height,\n        ref: \"test\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        id: \"score\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424\n        },\n        __self: this\n      }), React.createElement(\"script\", {\n        src: \"https://webrtc.github.io/adapter/adapter-1.0.7.js\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Video;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    canvasSprites: state.sprite.canvasSprites,\n    stopVideo: state.sound.stopVideo\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Video);","map":{"version":3,"sources":["/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/Video.js"],"names":["React","Component","connect","Stage","Layer","SpriteList","ControlBar","UploadSound","DiffCamEngine","stream","video","captureCanvas","captureContext","diffCanvas","diffContext","motionCanvas","motionContext","initSuccessCallback","initErrorCallback","startCompleteCallback","captureCallback","captureInterval","captureIntervalTime","captureWidth","captureHeight","diffWidth","diffHeight","isReadyToDiff","pixelDiffThreshold","scoreThreshold","includeMotionBox","includeMotionPixels","coords","testContext","test","spritePositionX","spritePositionY","count","Video","state","x","y","height","left","top","width","initSuccess","requestedStream","console","log","setState","start","document","createElement","autoplay","addEventListener","startComplete","srcObject","removeEventListener","setInterval","capture","stop","clearInterval","clearRect","getVideoTracks","drawSprites","props","canvasSprites","map","sprite","image","window","Image","src","url","onload","save","scale","drawImage","position","restore","captureImageData","getImageData","globalCompositeOperation","diffImageData","diff","processDiff","putImageData","motionBox","strokeStyle","strokeRect","min","max","imageData","score","hasMotion","motionPixels","getURL","getCaptureUrl","checkMotionPixel","spriteCanvas","getElementsByClassName","getBoundingClientRect","refs","motion","getContext","requestWebcam","constraints","audio","navigator","mediaDevices","getUserMedia","then","catch","initError","error","alert","rgba","data","undefined","i","length","pixelDiff","normalized","Math","calculateCoordinates","getElementById","uniqueKey","player","paused","play","pause","pixelIndex","floor","currentMotionBox","toDataURL","val","videoStyle","zIndex","motionStyle","testStyle","background","transform","WebkitTransform","MozTransform","mapStateToProps","stopVideo","sound","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n// import * as actions from '../redux/actions';\n// import { changeSprite } from '../actions/sprite'\n// import Konva from 'konva';\nimport { Stage, Layer } from 'react-konva';\nimport SpriteList from './SpriteList'\nimport ControlBar from './ControlBar'\nimport UploadSound from './UploadSound'\nimport { DiffCamEngine } from './diff-cam-engine'\n// import * from './adapter-1.0.7'\n\n  let stream;\t\t\t\t\t// stream obtained from webcam\n\tlet video;\t\t\t\t\t// shows stream\n\tlet captureCanvas;\t\t\t// internal canvas for capturing full images from video\n\tlet captureContext;\t\t\t// context for capture canvas\n\tlet diffCanvas;\t\t\t\t// internal canvas for diffing downscaled captures\n\tlet diffContext;\t\t\t// context for diff canvas\n\tlet motionCanvas;\t\t\t// receives processed diff images\n\tlet motionContext;\t\t\t// context for motion canvas\n\n\tlet initSuccessCallback;\t// called when init succeeds\n\tlet initErrorCallback;\t\t// called when init fails\n\tlet startCompleteCallback;\t// called when start is complete\n\tlet captureCallback;\t\t// called when an image has been captured and diffed\n\n\tlet captureInterval;\t\t// interval for continuous captures\n\tlet captureIntervalTime;\t// time between captures, in ms\n\tlet captureWidth;\t\t\t// full captured image width\n\tlet captureHeight;\t\t\t// full captured image height\n\tlet diffWidth;\t\t\t\t// downscaled width for diff/motion\n\tlet diffHeight;\t\t\t\t// downscaled height for diff/motion\n\tlet isReadyToDiff;\t\t\t// has a previous capture been made to diff against?\n\tlet pixelDiffThreshold;\t\t// min for a pixel to be considered significant\n\tlet scoreThreshold;\t\t\t// min for an image to be considered significant\n\tlet includeMotionBox;\t\t// flag to calculate and draw motion bounding box\n\tlet includeMotionPixels;\t// flag to create object denoting pixels with motion\n  let coords;\n  let testContext;\n  let test;\n  let spritePositionX;\n  let spritePositionY;\n  let count = 0;\n\nclass Video extends Component {\n  state = {\n    x: 0,\n    y: 0,\n    // bottom: 0,\n    height: 0,\n    left: 0,\n    // right: 0,\n    top: 0,\n    width: 0,\n    stream: null\n    // captureInterval: null,\n    // video: document.getElementById('video'),\n    // motionCanvas : document.createElement('canvas'),\n    // captureIntervalTime: 100,\n    // captureWidth: 640,\n    // captureHeight: 480,\n    // diffWidth: 64,\n    // diffHeight: 48,\n    // pixelDiffThreshold: 32,\n    // scoreThreshold: 16,\n    // includeMotionBox: false,\n    // includeMotionPixels: false,\n  }\n\n  componentDidMount() {\n    let spriteCanvas = document.getElementsByClassName('konvajs-content')[0].getBoundingClientRect()\n\n\n    this.setState({\n      x: spriteCanvas.x,\n      y: spriteCanvas.y,\n      // bottom: spriteCanvas.bottom,\n      height: spriteCanvas.height,\n      left: spriteCanvas.left,\n      // right: spriteCanvas.right,\n      top: spriteCanvas.top,\n      width: spriteCanvas.width,\n      // captureWidth: spriteCanvas.width,\n      // captureHeight: spriteCanvas.height,\n    })\n\n    motionCanvas = this.refs.motion\n    test = this.refs.test\n\n    // prep video\n\n    // non-configurable\n    captureCanvas = document.createElement('canvas');\n    diffCanvas = document.createElement('canvas');\n    isReadyToDiff = false;\n\n    // prep capture canvas\n    captureWidth= spriteCanvas.width;\n    captureHeight= spriteCanvas.height;\n    captureCanvas.width = captureWidth;\n    captureCanvas.height = captureHeight;\n    captureContext = captureCanvas.getContext('2d');\n\n    // prep diff canvas\n    diffWidth= 64;\n    diffHeight= 48;\n    diffCanvas.width = diffWidth;\n    diffCanvas.height = diffHeight;\n    diffContext = diffCanvas.getContext('2d');\n\n    // prep motion canvas\n    motionCanvas.width = diffWidth;\n    motionCanvas.height = diffHeight;\n    motionContext = motionCanvas.getContext('2d');\n\n    //test canvas\n    test.width = diffWidth;\n    test.height = diffHeight;\n    testContext = test.getContext('2d')\n\n    captureIntervalTime= 100;\n\n    pixelDiffThreshold= 32;\n    scoreThreshold= 16;\n    includeMotionBox= false;\n    includeMotionPixels= false;\n\n    captureCallback = function() {};\n    this.requestWebcam();\n  }\n\n  componentWillUnmount(){\n\n    this.stop()\n  }\n\n  requestWebcam() {\n    let constraints = {\n      audio: false,\n      video: {\n        width: captureWidth,\n        height: captureHeight\n      }\n    };\n\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then(this.initSuccess)\n      .catch(this.initError);\n  }\n\n  initSuccess = (requestedStream) => {\n    console.log(requestedStream)\n    stream = requestedStream\n    this.setState({\n      stream: stream\n    })\n    // console.log(initSuccessCallback)\n    // initSuccessCallback();\n    this.start();\n  }\n\n  initError(error) {\n    console.log(error);\n    alert('Something went wrong.');\n  }\n\n  start = () => {\n    // video = document.getElementById('video');\n    video = document.createElement('video')\n    video.autoplay = true\n    if (!stream) {\n      throw 'Cannot start after init fail';\n    }\n\n    // streaming takes a moment to start\n    video.addEventListener('canplay', this.startComplete);\n    video.srcObject = stream;\n  }\n\n  startComplete = () => {\n    video.removeEventListener('canplay', this.startComplete);\n    captureInterval = setInterval(this.capture, captureIntervalTime);\n  }\n\n  stop = () => {\n    clearInterval(captureInterval);\n    // video.src = '';\n    // motionContext.clearRect(0, 0, diffWidth, diffHeight);\n    testContext.clearRect(0, 0, diffWidth, diffHeight);\n    isReadyToDiff = false;\n    this.state.stream.getVideoTracks()[0].stop();\n  }\n\n  drawSprites = () => {\n    if(this.props.canvasSprites){\n      this.props.canvasSprites.map(sprite => {\n        const image = new window.Image();\n        image.src = sprite.sprite.url\n        image.onload = () => {\n          testContext.save()\n          testContext.scale(-1,1)\n          testContext.drawImage(image, sprite.position.x-test.width+60, sprite.position.y, -60, 60)\n          // testContext.drawImage(image,sprite.position.x,sprite.position.y,60,60)\n          testContext.restore()\n        }\n      })\n    }\n\n  }\n\n  capture = () => {\n    // save a full-sized copy of capture\n    captureContext.drawImage(video, 0, 0, captureWidth, captureHeight);\n    let captureImageData = captureContext.getImageData(0, 0, captureWidth, captureHeight);\n    testContext.drawImage(video, 0, 0, captureWidth, captureHeight);\n    this.drawSprites()\n    // diff current capture over previous capture, leftover from last time\n    diffContext.globalCompositeOperation = 'difference';\n    diffContext.drawImage(video, 0, 0, diffWidth, diffHeight);\n    let diffImageData = diffContext.getImageData(0, 0, diffWidth, diffHeight);\n    // console.log('diffImageData',diffImageData)\n\n    if (isReadyToDiff) {\n      let diff = this.processDiff(diffImageData);\n\n      motionContext.putImageData(diffImageData, 0, 0);\n      if (diff.motionBox) {\n        motionContext.strokeStyle = '#fff';\n        motionContext.strokeRect(\n          diff.motionBox.x.min + 0.5,\n          diff.motionBox.y.min + 0.5,\n          diff.motionBox.x.max - diff.motionBox.x.min,\n          diff.motionBox.y.max - diff.motionBox.y.min\n        );\n      }\n      captureCallback({\n        imageData: captureImageData,\n        score: diff.score,\n        hasMotion: diff.score >= scoreThreshold,\n        motionBox: diff.motionBox,\n        motionPixels: diff.motionPixels,\n        getURL: function() {\n          return this.getCaptureUrl(this.imageData);\n        },\n        checkMotionPixel: function(x, y) {\n          return this.checkMotionPixel(this.motionPixels, x, y)\n        }\n      });\n    }\n\n    // draw current capture normally over diff, ready for next time\n    diffContext.globalCompositeOperation = 'source-over';\n    diffContext.drawImage(video, 0, 0, diffWidth, diffHeight);\n    isReadyToDiff = true;\n  }\n\n  processDiff(diffImageData) {\n    let rgba = diffImageData.data;\n\n    // pixel adjustments are done by reference directly on diffImageData\n    let score = 0;\n    let motionPixels = includeMotionPixels ? [] : undefined;\n    let motionBox = undefined;\n    for (let i = 0; i < rgba.length; i += 4) {\n      let pixelDiff = rgba[i] * 0.3 + rgba[i + 1] * 0.6 + rgba[i + 2] * 0.1;\n      let normalized = Math.min(255, pixelDiff * (255 / pixelDiffThreshold));\n      rgba[i] = 0;\n      rgba[i + 1] = normalized;\n      rgba[i + 2] = 0;\n\n      if (pixelDiff >= pixelDiffThreshold) {\n        score++;\n        coords = this.calculateCoordinates(i / 4);\n        console.log('coords', coords, 'pixelDiff',pixelDiff,'i',i)\n        this.props.canvasSprites.map(sprite => {\n          if(sprite.position.x === 0){\n            // spritePositionX = 0\n            spritePositionX = 54  //mirrored canvas\n          }else{\n            spritePositionX = (sprite.position.x*diffWidth)/600\n          }\n          if(sprite.position.y === 0){\n            spritePositionY = 0\n            // spritePositionY = 42  //mirrored canvas\n          }\n          else{\n            spritePositionY = (sprite.position.y*diffHeight)/450\n          }\n\n          console.log('spritePositionX',spritePositionX,'sprite.position.x',sprite.position.x)\n          console.log('spritePositionY',spritePositionY,'sprite.position.y',sprite.position.y)\n          if(coords.x >= spritePositionX && coords.x <= spritePositionX+10){\n            if(coords.y >= spritePositionY && coords.y <= spritePositionY+6){\n              console.log('%c TOUCHED IT ', 'color: red')\n                count += 1\n                if(count > 5){\n                  if(document.getElementById(sprite.uniqueKey)){\n                    let player = document.getElementById(sprite.uniqueKey)\n                    player.paused ? player.play() : player.pause()\n                  }\n                  count = 0;\n                }\n              }\n            }\n          })\n\n\n        // if (includeMotionBox) {\n        //   motionBox = this.calculateMotionBox(motionBox, coords.x, coords.y);\n        // }\n        //\n        // if (includeMotionPixels) {\n        //   motionPixels = this.calculateMotionPixels(motionPixels, coords.x, coords.y, pixelDiff);\n        // }\n\n      }\n    }\n\n    return {\n      score: score,\n      motionBox: score > scoreThreshold ? motionBox : undefined,\n      motionPixels: motionPixels\n    };\n  }\n\n  calculateCoordinates(pixelIndex) {\n    return {\n      x: pixelIndex % diffWidth,\n      // y: Math.floor(pixelIndex / diffWidth)\n      y: Math.floor(pixelIndex / diffWidth)\n    };\n  }\n\n  calculateMotionBox(currentMotionBox, x, y) {\n    // init motion box on demand\n    let motionBox = currentMotionBox || {\n      x: {\n        min: coords.x,\n        max: x\n      },\n      y: {\n        min: coords.y,\n        max: y\n      }\n    };\n\n    motionBox.x.min = Math.min(motionBox.x.min, x);\n    motionBox.x.max = Math.max(motionBox.x.max, x);\n    motionBox.y.min = Math.min(motionBox.y.min, y);\n    motionBox.y.max = Math.max(motionBox.y.max, y);\n\n    return motionBox;\n  }\n\n  calculateMotionPixels(motionPixels, x, y, pixelDiff) {\n    motionPixels[x] = motionPixels[x] || [];\n    motionPixels[x][y] = true;\n\n    return motionPixels;\n  }\n\n  getCaptureUrl(captureImageData) {\n    // may as well borrow captureCanvas\n    captureContext.putImageData(captureImageData, 0, 0);\n    return captureCanvas.toDataURL();\n  }\n\n  checkMotionPixel(motionPixels, x, y) {\n    return motionPixels && motionPixels[x] && motionPixels[x][y];\n  }\n\n  getPixelDiffThreshold() {\n    return pixelDiffThreshold;\n  }\n\n  setPixelDiffThreshold(val) {\n    pixelDiffThreshold = val;\n  }\n\n  getScoreThreshold() {\n    return scoreThreshold;\n  }\n\n  setScoreThreshold(val) {\n    scoreThreshold = val;\n  }\n\n  render(){\n    console.log('VIDEO PROPS', this.props)\n    console.log('VIDEO STATE', this.state)\n\n    const videoStyle= {\n      top: 0,\n      left: 0,\n      position: 'absolute',\n      zIndex: 4,\n      // background: 'gray',\n    }\n\n    const motionStyle= {\n      top: this.state.top,\n      left: this.state.left,\n      position: 'absolute',\n      zIndex: -1,\n      // background: 'gray',\n    }\n\n    const testStyle= {\n      top: this.state.top,\n      left: this.state.left,\n      position: 'absolute',\n      zIndex: 4,\n      background: 'black',\n      transform: 'rotateY(180deg)',\n      WebkitTransform:'rotateY(180deg)',\n      MozTransform:'rotateY(180deg)',\n    }\n\n    return(\n      <div>\n        <video id=\"video\" style={videoStyle} width={this.state.width} height={this.state.height} ref='video'></video>\n        <canvas id='motion' style={motionStyle} width={this.state.width} height={this.state.height} ref='motion'/>\n        <canvas id='test' style={testStyle} width={this.state.width} height={this.state.height} ref='test'/>\n        <span id=\"score\"></span>\n        <script src=\"https://webrtc.github.io/adapter/adapter-1.0.7.js\"></script>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    canvasSprites: state.sprite.canvasSprites,\n    stopVideo: state.sound.stopVideo\n  }\n}\n\nfunction mapDispatchToProps(dispatch){\n  return {}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Video);\n"]},"metadata":{},"sourceType":"module"}