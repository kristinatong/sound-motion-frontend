{"ast":null,"code":"import _classCallCheck from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/Player.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ReactPlayer from 'react-player';\nimport { PlayerIcon } from 'react-player-controls';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport { colors } from '../App';\nimport * as actions from '../actions/sound';\n\nvar Player =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Player, _Component);\n\n  function Player() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Player);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Player)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loop: false,\n      paused: false\n    };\n\n    _this.handleChange = function () {\n      _this.setState({\n        loop: !_this.state.loop\n      });\n\n      _this.props.loopSound();\n    };\n\n    return _this;\n  }\n\n  _createClass(Player, [{\n    key: \"render\",\n    // // componentDidMount(){\n    // //   var music = document.getElementById('music'); // id for audio element\n    // //   var duration = music.duration; // Duration of audio clip, calculated here for embedding purposes\n    // //   var pButton = document.getElementById('pButton'); // play button\n    // //   var playhead = document.getElementById('playhead'); // playhead\n    // //   var timeline = document.getElementById('timeline'); // timeline\n    // //\n    // //   // timeline width adjusted for playhead\n    // //   var timelineWidth = timeline.offsetWidth - playhead.offsetWidth;\n    // //\n    // //   // timeupdate event listener\n    // //   music.addEventListener(\"timeupdate\", timeUpdate, false);\n    // //\n    // //   // makes timeline clickable\n    // //   timeline.addEventListener(\"click\", function(event) {\n    // //       moveplayhead(event);\n    // //       music.currentTime = duration * clickPercent(event);\n    // //   }, false);\n    // //\n    // //   // returns click as decimal (.77) of the total timelineWidth\n    // //   function clickPercent(event) {\n    // //       return (event.clientX - getPosition(timeline)) / timelineWidth;\n    // //   }\n    // //\n    // //   // makes playhead draggable\n    // //   playhead.addEventListener('mousedown', mouseDown, false);\n    // //   window.addEventListener('mouseup', mouseUp, false);\n    // //\n    // //   // Boolean value so that audio position is updated only when the playhead is released\n    // //   var onplayhead = false;\n    // //\n    // //   // mouseDown EventListener\n    // //   function mouseDown() {\n    // //       onplayhead = true;\n    // //       window.addEventListener('mousemove', moveplayhead, true);\n    // //       music.removeEventListener('timeupdate', timeUpdate, false);\n    // //   }\n    // //\n    // //   // mouseUp EventListener\n    // //   // getting input from all mouse clicks\n    // //   function mouseUp(event) {\n    // //       if (onplayhead == true) {\n    // //           moveplayhead(event);\n    // //           window.removeEventListener('mousemove', moveplayhead, true);\n    // //           // change current time\n    // //           music.currentTime = duration * clickPercent(event);\n    // //           music.addEventListener('timeupdate', timeUpdate, false);\n    // //       }\n    // //       onplayhead = false;\n    // //   }\n    // //   // mousemove EventListener\n    // //   // Moves playhead as user drags\n    // //   function moveplayhead(event) {\n    // //       var newMargLeft = event.clientX - getPosition(timeline);\n    // //\n    // //       if (newMargLeft >= 0 && newMargLeft <= timelineWidth) {\n    // //           playhead.style.marginLeft = newMargLeft + \"px\";\n    // //       }\n    // //       if (newMargLeft < 0) {\n    // //           playhead.style.marginLeft = \"0px\";\n    // //       }\n    // //       if (newMargLeft > timelineWidth) {\n    // //           playhead.style.marginLeft = timelineWidth + \"px\";\n    // //       }\n    // //   }\n    // //\n    // //   // timeUpdate\n    // //   // Synchronizes playhead position with current point in audio\n    // //   function timeUpdate() {\n    // //       var playPercent = timelineWidth * (music.currentTime / duration);\n    // //       playhead.style.marginLeft = playPercent + \"px\";\n    // //       if (music.currentTime == duration) {\n    // //           pButton.className = \"\";\n    // //           pButton.className = \"play\";\n    // //       }\n    // //   }\n    // //\n    // //\n    // //   // Gets audio file duration\n    // //   music.addEventListener(\"canplaythrough\", function() {\n    // //       duration = music.duration;\n    // //   }, false);\n    // //\n    // //   // getPosition\n    // //   // Returns elements left position relative to top-left of viewport\n    // //   function getPosition(el) {\n    // //       return el.getBoundingClientRect().left;\n    // //   }\n    // // }\n    //\n    // //Play and Pause\n    // play=()=>{\n    //   this.setState({\n    //     paused: !this.state.paused\n    //   })\n    // }\n    value: function render() {\n      console.log('PLAYER PROPS', this.props);\n      console.log('PLAYER STATE', this.state);\n      var url;\n\n      if (this.props.selectedSprite.sound) {\n        url = this.props.selectedSprite.sound.url; // loop = this.props.selectedSprite.sound.loop\n      } else {\n        url = \"test.mp3\";\n      }\n\n      return React.createElement(\"div\", {\n        className: \"player\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(ReactPlayer, {\n        className: \"react-player\",\n        width: 275,\n        height: 60,\n        url: url,\n        playing: this.props.djMode || this.props.playPreview ? false : true,\n        controls: this.props.djMode ? false : true,\n        loop: this.state.loop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(MuiThemeProvider, {\n        theme: colors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, !this.props.djMode ? React.createElement(FormControlLabel, {\n        disabled: !this.props.selectedSprite.sound ? true : false,\n        control: React.createElement(Checkbox, {\n          checked: this.state.loop,\n          value: this.state.loop,\n          onChange: this.handleChange,\n          color: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }),\n        label: \"LOOP\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }) : null)); // return(\n      //   <div className=\"player\">\n      //   <audio id=\"music\" playing={this.props.djMode ? false : true} preload=\"true\" loop={this.state.loop}>\n      //     <source src={url}/>\n      //     </audio>\n      //     <div id=\"audioplayer\">\n      //     <button id=\"pButton\" onClick={this.play} class={this.state.paused ? 'pause' : 'play'}></button>\n      //     <div id=\"timeline\">\n      //           <div id=\"playhead\"></div>\n      //     </div>\n      //     </div>\n      //     <MuiThemeProvider theme={colors}>\n      //     {!this.props.djMode ?\n      //     (\n      //     <FormControlLabel\n      //     disabled={!this.props.selectedSprite.sound ? true : false}\n      //     control={\n      //       <Checkbox\n      //         checked={this.state.loop}\n      //         value={this.state.loop}\n      //         onChange={this.handleChange}\n      //         color=\"primary\"\n      //       />\n      //     }\n      //     label=\"LOOP\"\n      //   />) : null}\n      //   </MuiThemeProvider>\n      //   </div>\n      // )\n    }\n  }]);\n\n  return Player;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    selectedSprite: state.sprite.selectedSprite,\n    djMode: state.sound.djMode,\n    playPreview: state.sprite.playPreview\n  };\n} // function mapDispatchToProps(dispatch){\n//   return {\n//\n//   }\n// }\n\n\nexport default connect(mapStateToProps, actions)(Player);","map":{"version":3,"sources":["/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/Player.js"],"names":["React","Component","connect","ReactPlayer","PlayerIcon","Checkbox","FormControlLabel","MuiThemeProvider","colors","actions","Player","state","loop","paused","handleChange","setState","props","loopSound","console","log","url","selectedSprite","sound","djMode","playPreview","mapStateToProps","sprite"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;;IAGMC,M;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE,KADA;AAENC,MAAAA,MAAM,EAAE;AAFF,K;;UAKRC,Y,GAAe,YAAM;AACnB,YAAKC,QAAL,CAAc;AACZH,QAAAA,IAAI,EAAE,CAAC,MAAKD,KAAL,CAAWC;AADN,OAAd;;AAGA,YAAKI,KAAL,CAAWC,SAAX;AACD,K;;;;;;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BAEQ;AACNC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2B,KAAKH,KAAhC;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B,KAAKR,KAAjC;AACA,UAAIS,GAAJ;;AACA,UAAG,KAAKJ,KAAL,CAAWK,cAAX,CAA0BC,KAA7B,EAAmC;AACjCF,QAAAA,GAAG,GAAG,KAAKJ,KAAL,CAAWK,cAAX,CAA0BC,KAA1B,CAAgCF,GAAtC,CADiC,CAEjC;AACD,OAHD,MAGK;AACHA,QAAAA,GAAG,GAAG,UAAN;AACD;;AACC,aACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAC,cAAvB;AAAsC,QAAA,KAAK,EAAE,GAA7C;AAAkD,QAAA,MAAM,EAAE,EAA1D;AAA8D,QAAA,GAAG,EAAEA,GAAnE;AAAwE,QAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWO,MAAX,IAAqB,KAAKP,KAAL,CAAWQ,WAAhC,GAA8C,KAA9C,GAAsD,IAAvI;AAA6I,QAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWO,MAAX,GAAoB,KAApB,GAA4B,IAAnL;AAAyL,QAAA,IAAI,EAAE,KAAKZ,KAAL,CAAWC,IAA1M;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EACmN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADnN,EAEE,oBAAC,gBAAD;AAAkB,QAAA,KAAK,EAAEJ,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,CAAC,KAAKQ,KAAL,CAAWO,MAAZ,GAED,oBAAC,gBAAD;AACA,QAAA,QAAQ,EAAE,CAAC,KAAKP,KAAL,CAAWK,cAAX,CAA0BC,KAA3B,GAAmC,IAAnC,GAA0C,KADpD;AAEA,QAAA,OAAO,EACL,oBAAC,QAAD;AACE,UAAA,OAAO,EAAE,KAAKX,KAAL,CAAWC,IADtB;AAEE,UAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,IAFpB;AAGE,UAAA,QAAQ,EAAE,KAAKE,YAHjB;AAIE,UAAA,KAAK,EAAC,SAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF;AAUA,QAAA,KAAK,EAAC,MAVN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFC,GAaG,IAdJ,CAFF,CADF,CAVI,CAkCJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;;EA7KgBb,S;;AAgLrB,SAASwB,eAAT,CAAyBd,KAAzB,EAAgC;AAC9B,SAAO;AACLU,IAAAA,cAAc,EAAEV,KAAK,CAACe,MAAN,CAAaL,cADxB;AAELE,IAAAA,MAAM,EAAEZ,KAAK,CAACW,KAAN,CAAYC,MAFf;AAGLC,IAAAA,WAAW,EAAEb,KAAK,CAACe,MAAN,CAAaF;AAHrB,GAAP;AAKD,C,CAED;AACA;AACA;AACA;AACA;;;AAEA,eAAetB,OAAO,CAACuB,eAAD,EAAkBhB,OAAlB,CAAP,CAAkCC,MAAlC,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport ReactPlayer from 'react-player'\nimport { PlayerIcon } from 'react-player-controls'\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport { colors } from '../App'\nimport * as actions from '../actions/sound'\n\n\nclass Player extends Component{\n  state = {\n    loop: false,\n    paused: false\n  }\n\n  handleChange = () => {\n    this.setState({\n      loop: !this.state.loop\n    })\n    this.props.loopSound()\n  }\n\n  // // componentDidMount(){\n  // //   var music = document.getElementById('music'); // id for audio element\n  // //   var duration = music.duration; // Duration of audio clip, calculated here for embedding purposes\n  // //   var pButton = document.getElementById('pButton'); // play button\n  // //   var playhead = document.getElementById('playhead'); // playhead\n  // //   var timeline = document.getElementById('timeline'); // timeline\n  // //\n  // //   // timeline width adjusted for playhead\n  // //   var timelineWidth = timeline.offsetWidth - playhead.offsetWidth;\n  // //\n  // //   // timeupdate event listener\n  // //   music.addEventListener(\"timeupdate\", timeUpdate, false);\n  // //\n  // //   // makes timeline clickable\n  // //   timeline.addEventListener(\"click\", function(event) {\n  // //       moveplayhead(event);\n  // //       music.currentTime = duration * clickPercent(event);\n  // //   }, false);\n  // //\n  // //   // returns click as decimal (.77) of the total timelineWidth\n  // //   function clickPercent(event) {\n  // //       return (event.clientX - getPosition(timeline)) / timelineWidth;\n  // //   }\n  // //\n  // //   // makes playhead draggable\n  // //   playhead.addEventListener('mousedown', mouseDown, false);\n  // //   window.addEventListener('mouseup', mouseUp, false);\n  // //\n  // //   // Boolean value so that audio position is updated only when the playhead is released\n  // //   var onplayhead = false;\n  // //\n  // //   // mouseDown EventListener\n  // //   function mouseDown() {\n  // //       onplayhead = true;\n  // //       window.addEventListener('mousemove', moveplayhead, true);\n  // //       music.removeEventListener('timeupdate', timeUpdate, false);\n  // //   }\n  // //\n  // //   // mouseUp EventListener\n  // //   // getting input from all mouse clicks\n  // //   function mouseUp(event) {\n  // //       if (onplayhead == true) {\n  // //           moveplayhead(event);\n  // //           window.removeEventListener('mousemove', moveplayhead, true);\n  // //           // change current time\n  // //           music.currentTime = duration * clickPercent(event);\n  // //           music.addEventListener('timeupdate', timeUpdate, false);\n  // //       }\n  // //       onplayhead = false;\n  // //   }\n  // //   // mousemove EventListener\n  // //   // Moves playhead as user drags\n  // //   function moveplayhead(event) {\n  // //       var newMargLeft = event.clientX - getPosition(timeline);\n  // //\n  // //       if (newMargLeft >= 0 && newMargLeft <= timelineWidth) {\n  // //           playhead.style.marginLeft = newMargLeft + \"px\";\n  // //       }\n  // //       if (newMargLeft < 0) {\n  // //           playhead.style.marginLeft = \"0px\";\n  // //       }\n  // //       if (newMargLeft > timelineWidth) {\n  // //           playhead.style.marginLeft = timelineWidth + \"px\";\n  // //       }\n  // //   }\n  // //\n  // //   // timeUpdate\n  // //   // Synchronizes playhead position with current point in audio\n  // //   function timeUpdate() {\n  // //       var playPercent = timelineWidth * (music.currentTime / duration);\n  // //       playhead.style.marginLeft = playPercent + \"px\";\n  // //       if (music.currentTime == duration) {\n  // //           pButton.className = \"\";\n  // //           pButton.className = \"play\";\n  // //       }\n  // //   }\n  // //\n  // //\n  // //   // Gets audio file duration\n  // //   music.addEventListener(\"canplaythrough\", function() {\n  // //       duration = music.duration;\n  // //   }, false);\n  // //\n  // //   // getPosition\n  // //   // Returns elements left position relative to top-left of viewport\n  // //   function getPosition(el) {\n  // //       return el.getBoundingClientRect().left;\n  // //   }\n  // // }\n  //\n  // //Play and Pause\n  // play=()=>{\n  //   this.setState({\n  //     paused: !this.state.paused\n  //   })\n  // }\n\n  render(){\n    console.log('PLAYER PROPS',this.props)\n    console.log('PLAYER STATE', this.state)\n    let url;\n    if(this.props.selectedSprite.sound){\n      url = this.props.selectedSprite.sound.url\n      // loop = this.props.selectedSprite.sound.loop\n    }else{\n      url = \"test.mp3\"\n    }\n      return(\n        <div className=\"player\">\n          <ReactPlayer className=\"react-player\" width={275} height={60} url={url} playing={this.props.djMode || this.props.playPreview ? false : true} controls={this.props.djMode ? false : true} loop={this.state.loop}/><br/>\n          <MuiThemeProvider theme={colors}>\n          {!this.props.djMode ?\n          (\n          <FormControlLabel\n          disabled={!this.props.selectedSprite.sound ? true : false}\n          control={\n            <Checkbox\n              checked={this.state.loop}\n              value={this.state.loop}\n              onChange={this.handleChange}\n              color=\"primary\"\n            />\n          }\n          label=\"LOOP\"\n        />) : null}\n        </MuiThemeProvider>\n        </div>\n      )\n\n\n\n      // return(\n      //   <div className=\"player\">\n      //   <audio id=\"music\" playing={this.props.djMode ? false : true} preload=\"true\" loop={this.state.loop}>\n      //     <source src={url}/>\n      //     </audio>\n      //     <div id=\"audioplayer\">\n      //     <button id=\"pButton\" onClick={this.play} class={this.state.paused ? 'pause' : 'play'}></button>\n      //     <div id=\"timeline\">\n      //           <div id=\"playhead\"></div>\n      //     </div>\n      //     </div>\n      //     <MuiThemeProvider theme={colors}>\n      //     {!this.props.djMode ?\n      //     (\n      //     <FormControlLabel\n      //     disabled={!this.props.selectedSprite.sound ? true : false}\n      //     control={\n      //       <Checkbox\n      //         checked={this.state.loop}\n      //         value={this.state.loop}\n      //         onChange={this.handleChange}\n      //         color=\"primary\"\n      //       />\n      //     }\n      //     label=\"LOOP\"\n      //   />) : null}\n      //   </MuiThemeProvider>\n      //   </div>\n      // )\n    }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedSprite: state.sprite.selectedSprite,\n    djMode: state.sound.djMode,\n    playPreview: state.sprite.playPreview\n  }\n}\n\n// function mapDispatchToProps(dispatch){\n//   return {\n//\n//   }\n// }\n\nexport default connect(mapStateToProps, actions)(Player);\n"]},"metadata":{},"sourceType":"module"}