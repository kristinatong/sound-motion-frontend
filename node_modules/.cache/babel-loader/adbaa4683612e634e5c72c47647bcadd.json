{"ast":null,"code":"import _classCallCheck from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/hocs/withAuth.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router'; // import * as actions from '../actions'\n\nimport { fetchCurrentUser as _fetchCurrentUser } from '../actions/user';\nimport { Loader } from 'semantic-ui-react'; // in this example, WrappedComponent is the Profile component\n\nvar withAuth =\n/*FUNCTION*/\nfunction withAuth(WrappedComponent) {\n  var AuthorizedComponent =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(AuthorizedComponent, _React$Component);\n\n    function AuthorizedComponent() {\n      _classCallCheck(this, AuthorizedComponent);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(AuthorizedComponent).apply(this, arguments));\n    }\n\n    _createClass(AuthorizedComponent, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        // POTENTIAL SECURITY FLAW!!! my tokens don't expire\n        if (localStorage.getItem('jwt') && !this.props.loggedIn) this.props.fetchCurrentUser(); // if i have a token but don't know who it belongs to, ask the server for that user's data\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        console.log('%c PROPS IN WITHAUTH HOC ', 'color: green', this.props);\n\n        if (localStorage.getItem('jwt') && this.props.loggedIn) {\n          //i have a token and i'm logged in according to redux\n          // wrapped component in our case is Profile\n          return React.createElement(WrappedComponent, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 22\n            },\n            __self: this\n          });\n        } else if (localStorage.getItem('jwt') && this.props.authenticatingUser) {\n          //we're currently fetching, show a loading spinner\n          return React.createElement(Loader, {\n            active: true,\n            inline: \"centered\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 25\n            },\n            __self: this\n          });\n        } else {\n          //user is not AUTHORIZED to see this component\n          return React.createElement(Redirect, {\n            to: \"/login\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 28\n            },\n            __self: this\n          });\n        }\n      }\n    }]);\n\n    return AuthorizedComponent;\n  }(React.Component);\n\n  var mapStateToProps =\n  /*FUNCTION*/\n  function mapStateToProps(reduxStoreState) {\n    return {\n      loggedIn: reduxStoreState.user.loggedIn,\n      authenticatingUser: reduxStoreState.user.authenticatingUser\n    };\n  };\n\n  var mapDispatchToProps =\n  /*FUNCTION*/\n  function mapDispatchToProps(dispatch) {\n    return {\n      fetchCurrentUser: function fetchCurrentUser() {\n        return dispatch(_fetchCurrentUser());\n      } //dispatch is automagically provided by redux\n\n    };\n  }; //\n  // const connectedToReduxHOC = connect(mapStateToProps, mapDispatchToProps)\n  // const connectedAuthorizedComponent = connectedToReduxHOC(AuthorizedComponent)\n  // return connectedAuthorizedComponent\n\n\n  return connect(mapStateToProps, {\n    fetchCurrentUser: _fetchCurrentUser\n  })(AuthorizedComponent);\n};\n\nexport default withAuth;","map":{"version":3,"sources":["/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/hocs/withAuth.js"],"names":["React","connect","Redirect","fetchCurrentUser","Loader","withAuth","WrappedComponent","AuthorizedComponent","localStorage","getItem","props","loggedIn","console","log","authenticatingUser","Component","mapStateToProps","reduxStoreState","user","mapDispatchToProps","dispatch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,cAAzB,C,CACA;;AACA,SAASC,gBAAgB,IAAhBA,iBAAT,QAAiC,iBAAjC;AACA,SAASC,MAAT,QAAuB,mBAAvB,C,CAEA;;AACA,IAAMC,QAAQ;AAAG;AAAa,SAAxBA,QAAwB,CAACC,gBAAD,EAAsB;AAAA,MAC5CC,mBAD4C;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,0CAE5B;AAClB;AACA,YAAIC,YAAY,CAACC,OAAb,CAAqB,KAArB,KAA+B,CAAC,KAAKC,KAAL,CAAWC,QAA/C,EAAyD,KAAKD,KAAL,CAAWP,gBAAX,GAFvC,CAGlB;AACD;AAN+C;AAAA;AAAA,+BAQvC;AACPS,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyC,cAAzC,EAAyD,KAAKH,KAA9D;;AACA,YAAIF,YAAY,CAACC,OAAb,CAAqB,KAArB,KAA+B,KAAKC,KAAL,CAAWC,QAA9C,EAAwD;AACtD;AACA;AACA,iBAAO,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,SAJD,MAIO,IAAIH,YAAY,CAACC,OAAb,CAAqB,KAArB,KAA+B,KAAKC,KAAL,CAAWI,kBAA9C,EAAkE;AACvE;AACA,iBAAO,oBAAC,MAAD;AAAQ,YAAA,MAAM,MAAd;AAAe,YAAA,MAAM,EAAC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,SAHM,MAGA;AACL;AACA,iBAAO,oBAAC,QAAD;AAAU,YAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AACF;AArB+C;;AAAA;AAAA,IAChBd,KAAK,CAACe,SADU;;AAwBlD,MAAMC,eAAe;AAAG;AAAa,WAA/BA,eAA+B,CAACC,eAAD,EAAqB;AACxD,WAAO;AACLN,MAAAA,QAAQ,EAAEM,eAAe,CAACC,IAAhB,CAAqBP,QAD1B;AAELG,MAAAA,kBAAkB,EAAEG,eAAe,CAACC,IAAhB,CAAqBJ;AAFpC,KAAP;AAID,GALD;;AAOA,MAAMK,kBAAkB;AAAG;AAAa,WAAlCA,kBAAkC,CAACC,QAAD,EAAc;AACpD,WAAO;AACLjB,MAAAA,gBAAgB,EAAE;AAAA,eAAMiB,QAAQ,CAACjB,iBAAgB,EAAjB,CAAd;AAAA,OADb,CACiD;;AADjD,KAAP;AAGD,GAJD,CA/BkD,CAoClD;AACA;AACA;AACA;;;AAEA,SAAOF,OAAO,CAACe,eAAD,EAAkB;AAAEb,IAAAA,gBAAgB,EAAhBA;AAAF,GAAlB,CAAP,CAA+CI,mBAA/C,CAAP;AACD,CA1CD;;AA4CA,eAAeF,QAAf","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router'\n// import * as actions from '../actions'\nimport { fetchCurrentUser } from '../actions/user'\nimport { Loader } from 'semantic-ui-react'\n\n// in this example, WrappedComponent is the Profile component\nconst withAuth = /*FUNCTION*/ (WrappedComponent) => {\n  class AuthorizedComponent extends React.Component {\n    componentDidMount() {\n      // POTENTIAL SECURITY FLAW!!! my tokens don't expire\n      if (localStorage.getItem('jwt') && !this.props.loggedIn) this.props.fetchCurrentUser()\n      // if i have a token but don't know who it belongs to, ask the server for that user's data\n    }\n\n    render() {\n      console.log('%c PROPS IN WITHAUTH HOC ', 'color: green', this.props)\n      if (localStorage.getItem('jwt') && this.props.loggedIn) {\n        //i have a token and i'm logged in according to redux\n        // wrapped component in our case is Profile\n        return <WrappedComponent />\n      } else if (localStorage.getItem('jwt') && this.props.authenticatingUser) {\n        //we're currently fetching, show a loading spinner\n        return <Loader active inline=\"centered\" />\n      } else {\n        //user is not AUTHORIZED to see this component\n        return <Redirect to=\"/login\" />\n      }\n    }\n  }\n\n  const mapStateToProps = /*FUNCTION*/ (reduxStoreState) => {\n    return {\n      loggedIn: reduxStoreState.user.loggedIn,\n      authenticatingUser: reduxStoreState.user.authenticatingUser\n    }\n  }\n\n  const mapDispatchToProps = /*FUNCTION*/ (dispatch) => {\n    return {\n      fetchCurrentUser: () => dispatch(fetchCurrentUser()), //dispatch is automagically provided by redux\n    }\n  }\n  //\n  // const connectedToReduxHOC = connect(mapStateToProps, mapDispatchToProps)\n  // const connectedAuthorizedComponent = connectedToReduxHOC(AuthorizedComponent)\n  // return connectedAuthorizedComponent\n\n  return connect(mapStateToProps, { fetchCurrentUser })(AuthorizedComponent)\n}\n\nexport default withAuth\n"]},"metadata":{},"sourceType":"module"}