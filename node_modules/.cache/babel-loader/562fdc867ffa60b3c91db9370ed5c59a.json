{"ast":null,"code":"import _classCallCheck from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/Player.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ReactPlayer from 'react-player';\nimport { PlayerIcon } from 'react-player-controls';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport { colors } from '../App';\nimport * as actions from '../actions/sound';\n\nvar Player =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Player, _Component);\n\n  function Player() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Player);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Player)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loop: false,\n      paused: false,\n      currentTime: null\n    };\n\n    _this.handleChange = function () {\n      _this.setState({\n        loop: !_this.state.loop\n      });\n\n      _this.props.loopSound();\n    };\n\n    return _this;\n  }\n\n  _createClass(Player, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var music = document.getElementById('music'); // id for audio element\n\n      var duration = music.duration; // Duration of audio clip, calculated here for embedding purposes\n\n      var pButton = document.getElementById('pButton'); // play button\n\n      var playhead = document.getElementById('playhead'); // playhead\n\n      var timeline = document.getElementById('timeline'); // timeline\n      // timeline width adjusted for playhead\n\n      var timelineWidth = timeline.offsetWidth - playhead.offsetWidth; // play button event listenter\n\n      pButton.addEventListener(\"click\", play); // timeupdate event listener\n\n      music.addEventListener(\"timeupdate\", timeUpdate, false); // makes timeline clickable\n\n      timeline.addEventListener(\"click\", function (event) {\n        moveplayhead(event);\n        music.currentTime = duration * clickPercent(event);\n      }, false); // returns click as decimal (.77) of the total timelineWidth\n\n      function clickPercent(event) {\n        return (event.clientX - getPosition(timeline)) / timelineWidth;\n      } // makes playhead draggable\n\n\n      playhead.addEventListener('mousedown', mouseDown, false);\n      window.addEventListener('mouseup', mouseUp, false); // Boolean value so that audio position is updated only when the playhead is released\n\n      var onplayhead = false; // mouseDown EventListener\n\n      function mouseDown() {\n        onplayhead = true;\n        window.addEventListener('mousemove', moveplayhead, true);\n        music.removeEventListener('timeupdate', timeUpdate, false);\n      } // mouseUp EventListener\n      // getting input from all mouse clicks\n\n\n      function mouseUp(event) {\n        if (onplayhead == true) {\n          moveplayhead(event);\n          window.removeEventListener('mousemove', moveplayhead, true); // change current time\n\n          music.currentTime = duration * clickPercent(event);\n          music.addEventListener('timeupdate', timeUpdate, false);\n        }\n\n        onplayhead = false;\n      } // mousemove EventListener\n      // Moves playhead as user drags\n\n\n      function moveplayhead(event) {\n        var newMargLeft = event.clientX - getPosition(timeline);\n\n        if (newMargLeft >= 0 && newMargLeft <= timelineWidth) {\n          playhead.style.marginLeft = newMargLeft + \"px\";\n        }\n\n        if (newMargLeft < 0) {\n          playhead.style.marginLeft = \"0px\";\n        }\n\n        if (newMargLeft > timelineWidth) {\n          playhead.style.marginLeft = timelineWidth + \"px\";\n        }\n      } // timeUpdate\n      // Synchronizes playhead position with current point in audio\n\n\n      function timeUpdate() {\n        var playPercent = timelineWidth * (music.currentTime / duration);\n        playhead.style.marginLeft = playPercent + \"px\";\n\n        if (music.currentTime == duration) {\n          pButton.className = \"\";\n          pButton.className = \"play\";\n        }\n      } //Play and Pause\n\n\n      function play() {\n        // start music\n        if (music.paused) {\n          music.play(); // remove play, add pause\n\n          pButton.className = \"\";\n          pButton.className = \"pause\";\n        } else {\n          // pause music\n          music.pause(); // remove pause, add play\n\n          pButton.className = \"\";\n          pButton.className = \"play\";\n        }\n      } // Gets audio file duration\n\n\n      music.addEventListener(\"canplaythrough\", function () {\n        duration = music.duration;\n      }, false); // getPosition\n      // Returns elements left position relative to top-left of viewport\n\n      function getPosition(el) {\n        return el.getBoundingClientRect().left;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log('PLAYER PROPS', this.props);\n      console.log('PLAYER STATE', this.state);\n      var url;\n\n      if (this.props.selectedSprite.sound) {\n        url = this.props.selectedSprite.sound.url; // loop = this.props.selectedSprite.sound.loop\n      } else {\n        url = \"test.mp3\";\n      } // return(\n      //   <div className=\"player\">\n      //     <ReactPlayer className=\"react-player\" width={275} height={60} url={url} playing={this.props.djMode ? false : true} controls={this.props.djMode ? false : true} loop={this.state.loop}/><br/>\n      //     <MuiThemeProvider theme={colors}>\n      //     {!this.props.djMode ?\n      //     (\n      //     <FormControlLabel\n      //     disabled={!this.props.selectedSprite.sound ? true : false}\n      //     control={\n      //       <Checkbox\n      //         checked={this.state.loop}\n      //         value={this.state.loop}\n      //         onChange={this.handleChange}\n      //         color=\"primary\"\n      //       />\n      //     }\n      //     label=\"LOOP\"\n      //   />) : null}\n      //   </MuiThemeProvider>\n      //   </div>\n      // )\n\n\n      return React.createElement(\"div\", {\n        className: \"player\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"audio\", {\n        id: \"music\",\n        playing: this.props.djMode ? false : true,\n        preload: \"true\",\n        loop: this.state.loop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"source\", {\n        src: url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"audioplayer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"pButton\",\n        onClick: this.play,\n        class: \"play\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"timeline\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"playhead\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }))), React.createElement(MuiThemeProvider, {\n        theme: colors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, !this.props.djMode ? React.createElement(FormControlLabel, {\n        disabled: !this.props.selectedSprite.sound ? true : false,\n        control: React.createElement(Checkbox, {\n          checked: this.state.loop,\n          value: this.state.loop,\n          onChange: this.handleChange,\n          color: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }),\n        label: \"LOOP\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }) : null));\n    }\n  }]);\n\n  return Player;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    selectedSprite: state.sprite.selectedSprite,\n    djMode: state.sound.djMode\n  };\n} // function mapDispatchToProps(dispatch){\n//   return {\n//\n//   }\n// }\n\n\nexport default connect(mapStateToProps, actions)(Player);","map":{"version":3,"sources":["/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/Player.js"],"names":["React","Component","connect","ReactPlayer","PlayerIcon","Checkbox","FormControlLabel","MuiThemeProvider","colors","actions","Player","state","loop","paused","currentTime","handleChange","setState","props","loopSound","music","document","getElementById","duration","pButton","playhead","timeline","timelineWidth","offsetWidth","addEventListener","play","timeUpdate","event","moveplayhead","clickPercent","clientX","getPosition","mouseDown","window","mouseUp","onplayhead","removeEventListener","newMargLeft","style","marginLeft","playPercent","className","pause","el","getBoundingClientRect","left","console","log","url","selectedSprite","sound","djMode","mapStateToProps","sprite"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport ReactPlayer from 'react-player'\nimport { PlayerIcon } from 'react-player-controls'\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport { colors } from '../App'\nimport * as actions from '../actions/sound'\n\n\nclass Player extends Component{\n  state = {\n    loop: false,\n    paused: false,\n    currentTime: null\n  }\n\n  handleChange = () => {\n    this.setState({\n      loop: !this.state.loop\n    })\n    this.props.loopSound()\n  }\n\n  componentDidMount(){\n    var music = document.getElementById('music'); // id for audio element\n    var duration = music.duration; // Duration of audio clip, calculated here for embedding purposes\n    var pButton = document.getElementById('pButton'); // play button\n    var playhead = document.getElementById('playhead'); // playhead\n    var timeline = document.getElementById('timeline'); // timeline\n\n    // timeline width adjusted for playhead\n    var timelineWidth = timeline.offsetWidth - playhead.offsetWidth;\n\n    // play button event listenter\n    pButton.addEventListener(\"click\", play);\n\n    // timeupdate event listener\n    music.addEventListener(\"timeupdate\", timeUpdate, false);\n\n    // makes timeline clickable\n    timeline.addEventListener(\"click\", function(event) {\n        moveplayhead(event);\n        music.currentTime = duration * clickPercent(event);\n    }, false);\n\n    // returns click as decimal (.77) of the total timelineWidth\n    function clickPercent(event) {\n        return (event.clientX - getPosition(timeline)) / timelineWidth;\n    }\n\n    // makes playhead draggable\n    playhead.addEventListener('mousedown', mouseDown, false);\n    window.addEventListener('mouseup', mouseUp, false);\n\n    // Boolean value so that audio position is updated only when the playhead is released\n    var onplayhead = false;\n\n    // mouseDown EventListener\n    function mouseDown() {\n        onplayhead = true;\n        window.addEventListener('mousemove', moveplayhead, true);\n        music.removeEventListener('timeupdate', timeUpdate, false);\n    }\n\n    // mouseUp EventListener\n    // getting input from all mouse clicks\n    function mouseUp(event) {\n        if (onplayhead == true) {\n            moveplayhead(event);\n            window.removeEventListener('mousemove', moveplayhead, true);\n            // change current time\n            music.currentTime = duration * clickPercent(event);\n            music.addEventListener('timeupdate', timeUpdate, false);\n        }\n        onplayhead = false;\n    }\n    // mousemove EventListener\n    // Moves playhead as user drags\n    function moveplayhead(event) {\n        var newMargLeft = event.clientX - getPosition(timeline);\n\n        if (newMargLeft >= 0 && newMargLeft <= timelineWidth) {\n            playhead.style.marginLeft = newMargLeft + \"px\";\n        }\n        if (newMargLeft < 0) {\n            playhead.style.marginLeft = \"0px\";\n        }\n        if (newMargLeft > timelineWidth) {\n            playhead.style.marginLeft = timelineWidth + \"px\";\n        }\n    }\n\n    // timeUpdate\n    // Synchronizes playhead position with current point in audio\n    function timeUpdate() {\n        var playPercent = timelineWidth * (music.currentTime / duration);\n        playhead.style.marginLeft = playPercent + \"px\";\n        if (music.currentTime == duration) {\n            pButton.className = \"\";\n            pButton.className = \"play\";\n        }\n    }\n\n    //Play and Pause\n    function play() {\n        // start music\n        if (music.paused) {\n            music.play();\n            // remove play, add pause\n            pButton.className = \"\";\n            pButton.className = \"pause\";\n        } else { // pause music\n            music.pause();\n            // remove pause, add play\n            pButton.className = \"\";\n            pButton.className = \"play\";\n        }\n    }\n\n    // Gets audio file duration\n    music.addEventListener(\"canplaythrough\", function() {\n        duration = music.duration;\n    }, false);\n\n    // getPosition\n    // Returns elements left position relative to top-left of viewport\n    function getPosition(el) {\n        return el.getBoundingClientRect().left;\n    }\n  }\n\n  render(){\n    console.log('PLAYER PROPS',this.props)\n    console.log('PLAYER STATE', this.state)\n    let url;\n    if(this.props.selectedSprite.sound){\n      url = this.props.selectedSprite.sound.url\n      // loop = this.props.selectedSprite.sound.loop\n    }else{\n      url = \"test.mp3\"\n    }\n      // return(\n      //   <div className=\"player\">\n      //     <ReactPlayer className=\"react-player\" width={275} height={60} url={url} playing={this.props.djMode ? false : true} controls={this.props.djMode ? false : true} loop={this.state.loop}/><br/>\n      //     <MuiThemeProvider theme={colors}>\n      //     {!this.props.djMode ?\n      //     (\n      //     <FormControlLabel\n      //     disabled={!this.props.selectedSprite.sound ? true : false}\n      //     control={\n      //       <Checkbox\n      //         checked={this.state.loop}\n      //         value={this.state.loop}\n      //         onChange={this.handleChange}\n      //         color=\"primary\"\n      //       />\n      //     }\n      //     label=\"LOOP\"\n      //   />) : null}\n      //   </MuiThemeProvider>\n      //   </div>\n      // )\n\n\n\n      return(\n        <div className=\"player\">\n        <audio id=\"music\" playing={this.props.djMode ? false : true} preload=\"true\" loop={this.state.loop}>\n          <source src={url}/>\n          </audio>\n          <div id=\"audioplayer\">\n          <button id=\"pButton\" onClick={this.play} class=\"play\"></button>\n          <div id=\"timeline\">\n                <div id=\"playhead\"></div>\n          </div>\n          </div>\n          <MuiThemeProvider theme={colors}>\n          {!this.props.djMode ?\n          (\n          <FormControlLabel\n          disabled={!this.props.selectedSprite.sound ? true : false}\n          control={\n            <Checkbox\n              checked={this.state.loop}\n              value={this.state.loop}\n              onChange={this.handleChange}\n              color=\"primary\"\n            />\n          }\n          label=\"LOOP\"\n        />) : null}\n        </MuiThemeProvider>\n        </div>\n      )\n    }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedSprite: state.sprite.selectedSprite,\n    djMode: state.sound.djMode\n  }\n}\n\n// function mapDispatchToProps(dispatch){\n//   return {\n//\n//   }\n// }\n\nexport default connect(mapStateToProps, actions)(Player);\n"]},"metadata":{},"sourceType":"module"}