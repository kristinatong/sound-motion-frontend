{"ast":null,"code":"import _defineProperty from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/LoginForm.js\";\nimport React from 'react';\nimport { connect } from 'react-redux'; // import { bindActionCreators } from 'redux'\n\nimport { withRouter, Redirect } from 'react-router';\nimport { loginUser } from '../actions/user';\nimport { Button, Form, Segment, Message } from 'semantic-ui-react';\n\nvar LoginForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LoginForm, _React$Component);\n\n  function LoginForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LoginForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LoginForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      email: '',\n      password: ''\n    };\n\n    _this.handleChange = function (e, _ref) {\n      var name = _ref.name,\n          value = _ref.value;\n      return _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.handleLoginSubmit = function () {\n      //semantic forms preventDefault for you\n      _this.props.loginUser(_this.state.username, _this.state.password); //comes from mapDispatchToProps\n\n\n      _this.setState({\n        username: '',\n        password: ''\n      }); //reset form to initial state\n\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginForm, [{\n    key: \"render\",\n    value: function render() {\n      console.log('%c PROPS IN LOGINFORM ', 'color: goldenrod', this.props);\n      return this.props.loggedIn ? React.createElement(Redirect, {\n        to: \"/profile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }) : React.createElement(Segment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.handleLoginSubmit,\n        size: \"mini\",\n        key: \"mini\",\n        loading: this.props.authenticatingUser,\n        error: this.props.failedLogin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(Message, {\n        error: true,\n        header: this.props.failedLogin ? this.props.error : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), React.createElement(Form.Group, {\n        widths: \"equal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(Form.Input, {\n        label: \"username\",\n        placeholder: \"username\",\n        name: \"username\",\n        onChange: this.handleChange,\n        value: this.state.username,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), React.createElement(Form.Input, {\n        type: \"password\",\n        label: \"password\",\n        placeholder: \"password\",\n        name: \"password\",\n        onChange: this.handleChange,\n        value: this.state.password,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      })), React.createElement(Button, {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"Login\")));\n    }\n  }]);\n\n  return LoginForm;\n}(React.Component); // const mapStateToProps = (reduxStoreState) => {\n//   return {\n//     authenticatingUser: reduxStoreState.usersReducer.authenticatingUser,\n//     failedLogin: reduxStoreState.usersReducer.failedLogin,\n//     error: reduxStoreState.usersReducer.error,\n//     loggedIn: reduxStoreState.usersReducer.loggedIn\n//   }\n// }\n// which pieces of the reduxStoreState does this component care about????\n// const mapStateToProps = ({usersReducer: { authenticatingUser, failedLogin, error, loggedIn } }) => ({\n//   authenticatingUser,\n//   failedLogin,\n//   error,\n//   loggedIn\n// })\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    authenticatingUser: state.user.authenticatingUser,\n    failedLogin: state.user.failedLogin,\n    error: state.user.error,\n    loggedIn: state.user.loggedIn\n  };\n}; // gives my component props (callback fns) that allow it to dispatch (SEND) actions to redux. these actions are then handled by my reducers\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     loginUser: (username, password) => dispatch(loginUser(username, password))\n//   }\n// }\n// const connectedToReduxHOC = connect(mapStateToProps, mapDispatchToProps)\n// const connectedToReduxLoginForm = connectedToReduxHOC(LoginForm)\n// const connectedToReduxHOCWithRouterLoginForm = withRouter(connectedToReduxLoginForm)\n//\n// export default connectedToReduxHOCWithRouterLoginForm\n\n\nexport default withRouter(connect(mapStateToProps, {\n  loginUser: loginUser\n})(LoginForm));","map":{"version":3,"sources":["/Users/kristinatong/projects/sound-motion/sound-motion-frontend/src/components/LoginForm.js"],"names":["React","connect","withRouter","Redirect","loginUser","Button","Form","Segment","Message","LoginForm","state","email","password","handleChange","e","name","value","setState","handleLoginSubmit","props","username","console","log","loggedIn","authenticatingUser","failedLogin","error","Component","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\n// import { bindActionCreators } from 'redux'\nimport { withRouter, Redirect } from 'react-router'\nimport { loginUser } from '../actions/user'\nimport { Button, Form, Segment, Message } from 'semantic-ui-react'\n\nclass LoginForm extends React.Component {\n  state = { email: '', password: '' }\n\n  handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n  // handleChange = (e, semanticInputData) => {\n  //   // semanticInputData.name -> 'username'\n  //   this.setState({ [semanticInputData.name]: semanticInputData.value })\n  // }\n\n  handleLoginSubmit = () => { //semantic forms preventDefault for you\n    this.props.loginUser(this.state.username, this.state.password) //comes from mapDispatchToProps\n    this.setState({ username: '', password: '' }) //reset form to initial state\n  }\n\n  render() {\n    console.log('%c PROPS IN LOGINFORM ', 'color: goldenrod', this.props)\n    return this.props.loggedIn ? (\n      <Redirect to=\"/profile\" />\n    ) : (\n      <Segment>\n        <Form\n          onSubmit={this.handleLoginSubmit}\n          size=\"mini\"\n          key=\"mini\"\n          loading={this.props.authenticatingUser}\n          error={this.props.failedLogin}\n        >\n          <Message error header={this.props.failedLogin ? this.props.error : null} />\n          <Form.Group widths=\"equal\">\n            <Form.Input\n              label=\"username\"\n              placeholder=\"username\"\n              name=\"username\"\n              onChange={this.handleChange}\n              value={this.state.username}\n            />\n            <Form.Input\n              type=\"password\"\n              label=\"password\"\n              placeholder=\"password\"\n              name=\"password\"\n              onChange={this.handleChange}\n              value={this.state.password}\n            />\n          </Form.Group>\n          <Button type=\"submit\">Login</Button>\n        </Form>\n      </Segment>\n    )\n  }\n}\n\n\n// const mapStateToProps = (reduxStoreState) => {\n//   return {\n//     authenticatingUser: reduxStoreState.usersReducer.authenticatingUser,\n//     failedLogin: reduxStoreState.usersReducer.failedLogin,\n//     error: reduxStoreState.usersReducer.error,\n//     loggedIn: reduxStoreState.usersReducer.loggedIn\n//   }\n// }\n\n// which pieces of the reduxStoreState does this component care about????\n// const mapStateToProps = ({usersReducer: { authenticatingUser, failedLogin, error, loggedIn } }) => ({\n//   authenticatingUser,\n//   failedLogin,\n//   error,\n//   loggedIn\n// })\n\nconst mapStateToProps = (state) => {\n  return {\n    authenticatingUser: state.user.authenticatingUser,\n    failedLogin: state.user.failedLogin,\n    error: state.user.error,\n    loggedIn: state.user.loggedIn\n  }\n}\n\n// gives my component props (callback fns) that allow it to dispatch (SEND) actions to redux. these actions are then handled by my reducers\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     loginUser: (username, password) => dispatch(loginUser(username, password))\n//   }\n// }\n\n// const connectedToReduxHOC = connect(mapStateToProps, mapDispatchToProps)\n// const connectedToReduxLoginForm = connectedToReduxHOC(LoginForm)\n// const connectedToReduxHOCWithRouterLoginForm = withRouter(connectedToReduxLoginForm)\n//\n// export default connectedToReduxHOCWithRouterLoginForm\n\n\nexport default withRouter(connect(mapStateToProps, { loginUser })(LoginForm))\n"]},"metadata":{},"sourceType":"module"}